[{"title":"Microsoft Defender for Endpoint Woes","type":0,"sectionRef":"#","url":"/blog/Defender-for-Endpoint-Woes","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"The Investigation​","type":1,"pageTitle":"Microsoft Defender for Endpoint Woes","url":"/blog/Defender-for-Endpoint-Woes#the-investigation","content":"From checking the alert, I could see the service was stopping and starting but, no real reason as to why it was doing this. This is when I turned to PowerShell (still unsure of why I did this over trusty Event Viewer, just seems to be my default now). Quickly smashed out the below command to see what I could find. This promptly spat out these errors. After googling this (as any techy would), there are a lot of mentions of this error message all over the place with suggestions to do the following:- Disable or uninstall any other AV products on the device. Run a Full system scan for viruses. Run a System File Checker scan from the command line, sfc /scannow. Re-install the Defender for Endpoint on that device. Update the OS to a new version (A bit extreme mind you however, new OS versions have much better support for Defender, you don't need this service on Server 2016 and above, so it's still valid!) "},{"title":"What Solved It​","type":1,"pageTitle":"Microsoft Defender for Endpoint Woes","url":"/blog/Defender-for-Endpoint-Woes#what-solved-it","content":"The short answer is, I'm not 100% certain. Our first port of call was to remove the System Center Endpoint Protection application, which we probably should have done before installing the Defender for Endpoint application to be honest. Secondly, we off-boarded the appliance from Defedner and then on-boarded it again by doing the following: - Download the off-boarding script from your Defender portal. In the navigation pane, select Settings &gt; Endpoints &gt; Device management &gt; Offboarding. Off-Board the Server using the script provided by Microsoft below. C:\\Packages\\Plugins\\Microsoft.Azure.AzureDefenderForServers.MDE.Windows\\versionNo\\Install.ps1. The command is, Install.ps1 -OffboardingScript .\\WindowsDefenderATPOffboardingScript_valid_until_*.cmd Reboot the server. Check the Defender application is gone from Programs and Features and that the Services are gone. If not, manually uninstall using Programs and Features. On-Board the server again using the script provided by Microsoft. Command below. C:\\Packages\\Plugins\\Microsoft.Azure.AzureDefenderForServers.MDE.Windows\\versionNo\\Install.ps1. The command is, .\\Install.ps1 -OnboardingScript .\\WindowsDefenderATPOnboardingScript_valid_until_*.cmd Reboot the server. Hopefully this helps somone! "},{"title":"Welcome!","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Welcome to the blog. This blog is created with Docusaurus 2. Quick Social Plug Check out my other post locations: - HashNode Link","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Useful Conditional Access Policies","type":0,"sectionRef":"#","url":"/docs/Azure-Active-Directory/Conditional-Access/Useful Conditional Access Policies","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Require a Compliant Windows Device​","type":1,"pageTitle":"Useful Conditional Access Policies","url":"/docs/Azure-Active-Directory/Conditional-Access/Useful Conditional Access Policies#require-a-compliant-windows-device","content":"This policy will require the user to login\\access tenant resources from a device that is policy compliant with your organisation. Assignments: Users: Include: All Users (Preferably target a group that has all users using Intune.) Target Resources: Include: All Cloud Apps.Exclude: Intune and Intune Enrolment. Conditions: Device Platforms: Windows (as an example)Locations: Include: All Locations.Exclude: Office Locations (for example). Access Controls: Grant: Device to be compliant (Select require one control.) "},{"title":"Require MFA for Admins​","type":1,"pageTitle":"Useful Conditional Access Policies","url":"/docs/Azure-Active-Directory/Conditional-Access/Useful Conditional Access Policies#require-mfa-for-admins","content":"Admin accounts are often targeted for attacks so enforcing MFA is a good idea. Assignments: Select Users or workload identities. Include: Directory Roles or User accounts depending on the above selection.Exclude: Any break glass accounts. Target Resources: Include: All Cloud Apps. Conditions: None Access Controls: Grant access, Require multifactor authentication.  Created: 2023-09-23, Last Updated: 2023-09-23 "},{"title":"Restore data from a Snapshot","type":0,"sectionRef":"#","url":"/docs/Azure/Disks/Restore data from a Snapshot","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#document-control","content":"Created: xLast Updated: 23/04/22 info This doc is for file level restores, this differs from a VM level restore. "},{"title":"Create a new disk from a Snapshot​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#create-a-new-disk-from-a-snapshot","content":"Validate the Snapshot Make sure to check the SnapShot is valid before starting this process. I'm assuming that there's already a Snapshot ready to go. Open the Azure portal, https://portal.azure.com.Navigate to a VM that is available to have a disk attached to it.Click on Disks on the left-hand side.Create a new disk.Click Edit on the far right hand side. As shown in red above.Name your Disk, I'd suggest, snapshot_ServerName_Date_TimeSource, Select snapshot.Select the Snapshot you wish to attach.Make any changes to the Encryption Type.I'd suggest it not to be a shared disk.Press Save. This shouldn't take too long. "},{"title":"Error \"Host Caching is disabled...\"​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#error-host-caching-is-disabled","content":"If you see the error below, change the Host Caching option to &quot;none&quot;.  "},{"title":"Confirm disk is visibile in the OS​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#confirm-disk-is-visibile-in-the-os","content":"tip The share should be available from the get go however, you may need to bring the disk online within computer management. RDP into your VM &amp; check File Explorer for your disk, the name will be what the share was called originally.Open Computer Management, Click Disk Management.Right-Click on the disk, mark it as Oneline. You should now see it in File Explorer. "},{"title":"Detach the disk​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#detach-the-disk","content":""},{"title":"Welcome to the Wiki","type":0,"sectionRef":"#","url":"/docs/","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Navigating the Wiki​","type":1,"pageTitle":"Welcome to the Wiki","url":"/docs/#navigating-the-wiki","content":"Navigate using the navbar on the left hand side. Search the site. There is a search bar in the top right, try searching keywords for what you're after. "},{"title":"How the site works​","type":1,"pageTitle":"Welcome to the Wiki","url":"/docs/#how-the-site-works","content":"The website is stored within a GitHub Repo, this is then copied over to a Static Web App hosted in Azure using a GitHub action.The site is generated using Docusaurus, big shout to them for making this incredible beast! "},{"title":"Azure ligthhouse Setup","type":0,"sectionRef":"#","url":"/blog/Setup-Azure-Lighthouse","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Online Reading​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#online-reading","content":"Below are some links that are good reading before you dig into setting up the application. Microsoft doc - What is Azure Lighthouse?.Microsoft doc - Onboard a customer to Azure Lighthouse. "},{"title":"Setup Guidance​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#setup-guidance","content":"You've got some key areas to think about here before you get started, Azure AD and your Azure Lighthouse offering/delegation. Before you get cracking think about the following: These are all explained further down! Azure Active Directory: Are you going to create seperate groups per department.What is your naming convention going to be. Azure Lighthouse offering/delegation: Offering Naming Convention (Client will see this).Offering Description (Client will see this).Authorisations.Delegation Scopes (Subscription level or Resource Group Leve.) My Opinions I'd highly recommend reviewing the links mentioned in the Online Reading section for up to date information. The information following this point are from my notes. "},{"title":"Azure AD​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#azure-ad","content":"To set things up, start by creating some groups within Azure AD. These groups will include the satff members who need access to the customer/client through Azure lighthouse. You have the flexibility to make these groups as detailed and numerous as needed. I recommend considering two key roles, these roles can be fine-tuned to meet your specific requirements: Azure Lighthouse ContributorAzure Lighthouse Reader Role Assignment to staff business roles. Initially, I attempted to set up separate groups for each department, such as Operations, Service Desk, and Finance. While this approach worked well for the technical teams, it didn't meet my expectations when it came to granting access to billing information for the Finance team. After extensive testing, I discovered that using direct or named accounts, or leveraging the Microsoft Partner Center, provided a more effective solution. "},{"title":"Azure Lighthouse Offering​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#azure-lighthouse-offering","content":"ARM Template​ Below is an outline and suggestion for each relevant configurable options for the ARM template. On-boarding multiple Subscriptions or Resource Groups for one client\\customer. You have the option to delegate multiple resource groups and subscriptions all at once from the Service Providers dashboard within the customer's tenant. While the documentation might imply otherwise, it is indeed possible and functional. Offering Name​ When naming your offering, remember that it will be visible in your customer's tenant, so it's important that it looks good. I recommend using a format like this: Managing Company Name Lighthouse Offering for Customer Name - Subscription or Resource Group Name. Be sure to replace the placeholders with the relevant details based on your naming convention. Description(s)​ The description is customer-facing, so it should be clear and informative. Here's a suggested format: Managing Company Name managed services offer for overseeing supported resources.Managing Company Name offer for managing and overseeing project resources for project or PO number. Delegation Scope(s)​ You have two options: Subscription and Resource Group. These choices are quite self-explanatory. However, it's important to note that you cannot change these after deployment, so be sure to select the one that suits your specific needs. Authorisations​ Authorisations represent the roles you intend to assign to your pre-configured Azure AD groups. You have the flexibility to define these roles as either broad or specific, although I recommend a broader approach to minimize the need for creating or updating new delegations in the future. Broader Authorisations While this approach may sound appealing in theory, it's crucial to think about security. It may not be advisable if you are responsible for managing a small portion or a specific resource within your customer's environment. Additionally, consider the nature of your customer in this context. Principal type: GroupName: Choose one of the mentioned groups in the section above.Display Name: Please do not edit. (This is the friendly name displayed in the customer's tenant, and it will default to the group name.)Role: Assign the roles as indicated for the groups listed above.Access Type: Permanent. "},{"title":"ARM template Example​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#arm-template-example","content":"You can skip the initial lines until you locate mspOfferName. In the vicinity of this, you'll find the description field. To make changes, modify the defaultValue: data, not the description: information. Confirming your scope Locate the line &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2019-08-01/subscriptionDeploymentTemplate.json#&quot;, and modify it to reflect either a subscription or resource deployment template, depending on your initial selection. Similar situation with the mspOfferDescription: as well. &quot;mspOfferName&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;metadata&quot;: { &quot;description&quot;: &quot;Specify a unique name for your offer&quot; }, &quot;defaultValue&quot;: &quot;My Company Lighthouse Contributor Offer for Customer Name - Subscription Name &quot; }, &quot;mspOfferDescription&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;metadata&quot;: { &quot;description&quot;: &quot;Name of the Managed Service Provider offering&quot; }, &quot;defaultValue&quot;: &quot;My Company managed services offer to administer support resources.&quot; }  Locate the variables: section to define your group and the Azure role assignments. managedByTenantId&quot; - is your tenant or partner tenant ID.&quot;authorizations&quot;: - Are you Azure Roles assignments.&quot;principalId&quot; - Is your object in the managing tenant.&quot;roleDefinitionId&quot; - Is the Azure AD role you've assigned. In the case below, it's Contributor and the Managed Services Registration assignment Delete roles.&quot;principalIdDisplayName&quot; - Is your friendly Group name, this will show in your customer tenant, it does not need to match the group name in the managing tenant. You'll see some of the information repeated for each role you assign to the same object in the managing tenant. &quot;variables&quot;: { &quot;mspRegistrationName&quot;: &quot;[guid(parameters('mspOfferName'))]&quot;, &quot;mspAssignmentName&quot;: &quot;[guid(parameters('mspOfferName'))]&quot;, &quot;managedByTenantId&quot;: &quot;Your tenant ID&quot;, &quot;authorizations&quot;: [ { &quot;principalId&quot;: &quot;Your object in the managing tenant&quot;, &quot;roleDefinitionId&quot;: &quot;Id-number-here&quot;, &quot;principalIdDisplayName&quot;: &quot;Lighthouse Contributor&quot; }, { &quot;principalId&quot;: &quot;Your object in the managing tenant&quot;, &quot;roleDefinitionId&quot;: &quot;Id-number-here&quot;, &quot;principalIdDisplayName&quot;: &quot;Lighthouse Contributor&quot; } ] },  You can edit the JSON template directly! You don't need to always duck back into Azure Lighthouse to create the templates, you can just edit the JSON files if you're comfortable doing so. "},{"title":"Using Lighthouse​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#using-lighthouse","content":"After setting up and assigning your Lighthouse delegations to your staff, there's no specific action required to access Azure Lighthouse. It's consistently available. Below, we provide two methods to verify the status of your delegations. "},{"title":"Via the Lighthouse blade​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#via-the-lighthouse-blade","content":"Open the Azure Management Portal.Search for Azure Lighthouse.Click on the Delegations option on the left-hand side, you may need to click manage my customers if you’ve no connections.You will then see your list of your customer’s subscriptions that you have access to. "},{"title":"Via the subscriptions blade​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#via-the-subscriptions-blade","content":"You'll need to show the customer in the subscription filter first though. Open the Azure Management Portal.Navigate to the Subscriptions blade.The list of subscriptions will also list the customer subscriptions you have access too.In the Azure portal, Select the Directory + subscriptions or Settings icon in the top right of the page.In the Directories + subscriptions settings page, ensure that the Advanced filters toggle is turned off.In the Default subscription filter section, select the appropriate directory and subscription. info If you have been granted access to one or more resource groups, rather than to an entire subscription, select the subscription to which that resource group belongs. You'll then work in the context of that subscription, but will only be able to access the designated resource group(s). "},{"title":"Partner Earned Credit (PEC) using PAL​","type":1,"pageTitle":"Azure ligthhouse Setup","url":"/blog/Setup-Azure-Lighthouse#partner-earned-credit-pec-using-pal","content":"PAL (Partner Admin Link) is how a partner can be recognized by Microsoft for their work in Azure on-behalf-of their customer. Microsoft doc - Associate your partner ID when you onboard new customers vai Lighthouse.Microsoft doc - Link a PartnerID with PAL or DPOR for PAL To do this via Lighthouse, in a nutshell. Create a service principal user account in your managing tenant.Using that service principal account, link to your Associated Partner ID in your managing tenant.Include at least one authorization which includes the service principal Account as a user with an Azure built-in role that is eligible for PEC. caution This role must be granted as a permanent assignment, not as a just-in-time eligible authorization, in order for PEC to apply. "},{"title":"Decom an Azure AD App","type":0,"sectionRef":"#","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Prerequisites​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#prerequisites","content":"Must be an owner of the application or have admin privileges. "},{"title":"Locate the App​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#locate-the-app","content":"Sign in to the Azure portal.Search and select the Azure Active Directory app.Under Manage, select App registrations and select the application(Desktop Portal) that you want to configure. "},{"title":"Confirm the App is not longer used​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#confirm-the-app-is-not-longer-used","content":"Prevent access via the app to determine it is not being used, change the following Application settings using the Azure AD portal. Overview Page Enabled for users to sign-in? - Set this setting to NO. With this off, the application cannot be used. Users and Groups Page Remove all groups\\users (Screenshot them incase they need to be re-added). Permissions Page Remove all Admin and User consented permissions (Screenshot them incase they need to be re-added). "},{"title":"Delete the App from Azure AD​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#delete-the-app-from-azure-ad","content":"From the Overview page, select Delete.Read the deletion consequences. Check the box if one appears at the bottom of the pane.Select Delete to confirm that you want to delete the app. "},{"title":"Challenge 2 - Folder Size Report with PowerShell","type":0,"sectionRef":"#","url":"/blog/pwsh-challenge-002","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"End Result​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#end-result","content":"Thought I would put the result first, and save people from scrolling, those who wish to see the process can read the rest of this! I decided not to add any error handling into this, as it's quite hard to break this one! note Sorry for the backticks, it makes it a bit easier to read on the page as it's quite slim! Link to script in GitHub! ###### Prompt user for flder input. ###### $sourceDirectory = Read-Host -Prompt &quot;Please enter the directory you wish to scan&quot; ###### Get all Directories in that location. ###### Write-Host &quot;Collecting the diretory information.&quot; -ForegroundColor Yellow $ChildDirectories = (Get-ChildItem $sourceDirectory -Directory).FullName Start-Sleep 1 Write-Host &quot;Directories found successfully.&quot; -ForegroundColor Green ###### Foreach directory get all items recursively. ###### Write-Host &quot;Processing items.&quot; -ForegroundColor Yellow $childDirectorySizes = foreach ($folder in $ChildDirectories) { [PSCustomObject]@{ &quot;Location&quot; = $folder &quot;FileItems&quot; = (Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object | Select-Object Count).Count &quot;Size(MB)&quot; = [Math]::Round((Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object -Property Length -Sum | Select-Object Sum).Sum / 1MB, 3) } } Write-Host &quot;All subdirectories processed successfully.&quot; -ForegroundColor Green ###### Provide a size report of the directory and child directories. ###### $childDirectorySizes | Format-Table * -AutoSize  "},{"title":"Building the script​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#building-the-script","content":"I would like to start by saying I am not an expert at this but, these challenges prompt learning and thus I aim to be better for the next challenge and so on. "},{"title":"Prompting for user input​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#prompting-for-user-input","content":"Firstly, we need to get the folder location from the end user. I've done this using the Read-Host command with the -prompt parameter. This is a staple command I have found in almost every script requiring user input. $sourceDirectory = Read-Host -Prompt &quot;Please enter the directory you wish to scan&quot;  The Read-Host -prompt input is then stored in the `$sourceDirectory`` variable for later use. "},{"title":"Getting the Folders​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#getting-the-folders","content":"Secondly, we need to identify the folders that are within the directory the user gave us. We are doing this with the Get-ChildItem command, which gets everything in that location, Folders, or Files. I'm then piping this | into a Where-Object command which then identifies the Folders or containers. info I've added a sort by &quot;name&quot; at the end, as I want to display the first 10 items in the console, to indicate that the script has found items to the end user. It is completely unnecessary! ###### Prompt user for flder input. ###### $sourceDirectory = Read-Host -Prompt &quot;Please enter the directory you wish to scan&quot;  We then get all of hte directories in the folder location promtped for using the lin above. ###### Get all Directories in that location. ###### $ChildDirectories = (Get-ChildItem $sourceDirectory -Directory).FullName Start-Sleep 1 # Add this for slightly better pacing when using the script.  "},{"title":"Getting the Folder Sizes​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#getting-the-folder-sizes","content":"Thirdly, we need to get the folder sizes and convert them into a nicer format to read, quite a bit to unpack on this one, so please bear with my explanation; you may also want to blow this image up, it's a little small, sorry! ###### Foreach directory get all items recursively. ###### Write-Host &quot;Processing items.&quot; -ForegroundColor Yellow $childDirectorySizes = foreach ($folder in $ChildDirectories) { [PSCustomObject]@{ &quot;Location&quot; = $folder &quot;FileItems&quot; = (Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object | Select-Object Count).Count &quot;Size(MB)&quot; = [Math]::Round((Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object -Property Length -Sum | Select-Object Sum).Sum / 1MB, 3) } }  I've created a new variable called, $childDirectorySizes in this variable, we are going to store the output of the foreach loop. The foreach the argument takes each folder entry found within the $ChildDirectories &amp; then loops through the script inside the squiggly brackets. foreach ($folder in $ChildDirectories)  The foreach loop does the following: - Grabs the full file paths for each file recursively using Get-ChildItem $folder.FullName -recurse -force.Then it searches for any objects that are not a Folder using Where-Object {$_.PSIsContainer -eq $false}.It then measures the object using Measure-Object -property Length -sum.We then select only the one property that we want, Select-Object Sum.It then stores results inside the variable $subFolderItems.We then create a new PowerShell object using the command, [PSCustomObject], as this is going to be a new Hash table, we add the @{} after it, all properties go inside the squiggly brackets.We then create 2 new properties, Location and Size(MB). For each of these properties, we need to tell it where the information comes from and how to format it. For Location, we are going to use the Items Full name, which is equal to its full UNC path. $folder.FullName. For Size(MB), we are going to use the Output of steps 1 to 5. The output from this should be the SUM of all the files under the folder item that's stored in the variable $folder which is in the foreach loop argument. We also want to round this to MBs with 2 Decimal places; we can do this with the command, [Math]::Round($subFolderItems.sum /1MB, 2). "},{"title":"Creating a console Ouput​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#creating-a-console-ouput","content":"For this point, I have taken the variable that is holding the output from the Foreach loop noted above and piped this into a Format-Table command with the order of the properties to show. ###### Provide a size report of the directory and child directories. ###### $childDirectorySizes | Format-Table * -AutoSize  Which gives you this. Location FileItems Size(MB) -------- --------- -------- C:\\GitRepos\\100-days-of-javascript 287 59.772 C:\\GitRepos\\PowerShellChallenge 106 0.072 C:\\GitRepos\\Private-Code-Dump 253 14.089 C:\\GitRepos\\python-app 97 0.067 C:\\GitRepos\\The-IT-Knowledge-base 36396 414.871  "},{"title":"Request a Certificate from internal CA","type":0,"sectionRef":"#","url":"/docs/Certificate-Mgmt/Request a Certificate from internal CA","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Request a Certificate from internal CA","url":"/docs/Certificate-Mgmt/Request a Certificate from internal CA#document-control","content":"Created: 2023-09-02Last Updated: 2023-09-16 "},{"title":"Generating a CSR​","type":1,"pageTitle":"Request a Certificate from internal CA","url":"/docs/Certificate-Mgmt/Request a Certificate from internal CA#generating-a-csr","content":"Generate a CSR from another server, doing this from IIS is a tried and tested method. "},{"title":"Submitting the request to the CA​","type":1,"pageTitle":"Request a Certificate from internal CA","url":"/docs/Certificate-Mgmt/Request a Certificate from internal CA#submitting-the-request-to-the-ca","content":"Open a web browser.Browse to your Certificate Authority website. Certificate Authority website URL Enter the address of your CA followed by /certsrv for example http://ca server name/certsrv in the Address bar. Click Request a Certificate.  Click submit an advanced certificate request.  Paste in the CSR.  Certificate template Make sure to change the template you want to use if that is applicable.  "},{"title":"Completing the Request​","type":1,"pageTitle":"Request a Certificate from internal CA","url":"/docs/Certificate-Mgmt/Request a Certificate from internal CA#completing-the-request","content":"Your certificate should be approved almost instantly and some download options will appear. Select whatever download option is best for you; I'd suggest renaming the certificate file you download, it'll have a generic name otherwise. tip The chain option downloads the Certificate Authority certs (Root and Sub-CAs in the chain) as well, all the way back to the root ca. "},{"title":"Generating CSRs","type":0,"sectionRef":"#","url":"/docs/Certificate-Mgmt/Generating CSRs","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Generating CSRs","url":"/docs/Certificate-Mgmt/Generating CSRs#document-control","content":"Created: 2023-09-02Last Updated: 2023-09-16 "},{"title":"What is a CSR?​","type":1,"pageTitle":"Generating CSRs","url":"/docs/Certificate-Mgmt/Generating CSRs#what-is-a-csr","content":"What does it stand for? CSR stands for Certificate signing request. The CSR contains information (e.g. common name, organization, country) the Certificate Authority (CA) will use to create your certificate. It also contains the public key that will be included in your certificate and is signed with the corresponding private key. "},{"title":"Creating one (Windows IIS)​","type":1,"pageTitle":"Generating CSRs","url":"/docs/Certificate-Mgmt/Generating CSRs#creating-one-windows-iis","content":"The most common method of generating or creating a CSR is via Internet Information Services (IIS), which is a microsoft product that runs on the Windows OS as part of a server installation. What other methods are there? There are lots of different methods to generate a CSR file, it depends on what operation system you're running. Try this link for more information. Access the Server: Remote Desktop (RDP) or log in to a Windows machine running IIS.Open IIS: To open the Internet Information Services (IIS) Manager, simply type &quot;IIS&quot; in the Windows start menu search bar and click on the app when it appears.Select the Server: Inside the IIS Manager, locate and click on the Server Name corresponding to your IIS instance.Manage Certificates: In the center menu, navigate to the Security section and double-click on Server Certificates.Create Certificate Request: Within the Server Certificates window, go to the Actions menu on the right and select Create Certificate Request.Complete Certificate Request: The Request Certificate Wizard will appear. You will be prompted to enter specific information in the Distinguished Name Properties window. Fill in the required details as instructed.Proceed: After entering the necessary information, click Next to continue the certificate request process. Mandatory information You must fill the Common Name in with the domain that you wish to cover with the certificate. If you wanted to create a certificate for &quot;www.finepies.com&quot;, that is what must be in the Common Name field. In the Cryptographic Service Provider Properties window leave the top field as Microsoft RSA SChannel Cryptographic Provider.Make sure the minimum Bit length is set ot 2048 or higher.Click Next.Save the text file someone easy to find and you're done. Take the CSR file to your certificate authority, internal or externally hosted and upload your CSR, you'll get a certificate back again. "},{"title":"Final steps​","type":1,"pageTitle":"Generating CSRs","url":"/docs/Certificate-Mgmt/Generating CSRs#final-steps","content":"Depending on what you want to use the certificate for, you may need to &quot;complete&quot; the certificate. Access IIS again.From the center menu double-click Server Certificates in the Security section.Click Complete Certificate Request.Complete the Wizard and it will have imported the certificate into the store you selected. You'll now be able to export the certificate and the private key should you need to. "},{"title":"Autopilot Setup Suggestions","type":0,"sectionRef":"#","url":"/docs/Intune/Autopilot/Autopilot Setup Suggestions","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Too Long; Didn't Read​","type":1,"pageTitle":"Autopilot Setup Suggestions","url":"/docs/Intune/Autopilot/Autopilot Setup Suggestions#too-long-didnt-read","content":"Setup 3 Dynamic groups in Azure AD that cover the follolwing: All intune Devices (Dynamic Device), All Autopilot Devices (Dynamic Device) and All Intune Users (Dynamic User).For each of the three groups, setup the expresssions; review this Microsoft documentation for how to do this.Create a Conditional Access policy, that will only allow access if the deivces is policy compliant, make sure this is applied to the all intune users dynamic group you've setup. "},{"title":"Consider all of the moving parts​","type":1,"pageTitle":"Autopilot Setup Suggestions","url":"/docs/Intune/Autopilot/Autopilot Setup Suggestions#consider-all-of-the-moving-parts","content":"Autopilot is setup within Microsoft Intune yes however, as I have learnt there are other areas that should be thought about when implementing this. Azure Active Directory groups and users.Application deployment and Update processes.Conditional Access policy. "},{"title":"Azure AD​","type":1,"pageTitle":"Autopilot Setup Suggestions","url":"/docs/Intune/Autopilot/Autopilot Setup Suggestions#azure-ad","content":"Azure active directory is the main Identity solution within the Microsoft suit of products and underpins the majority of services; it's mainly used to manage users and groups. "},{"title":"Users and Groups​","type":1,"pageTitle":"Autopilot Setup Suggestions","url":"/docs/Intune/Autopilot/Autopilot Setup Suggestions#users-and-groups","content":"The Autopilot profile will target a group, that group should be home to your Windows Devices. However, there's an important consideration to keep in mind. When using the Autopilot process, apps will be automatically installed if they are deployed to the same group as your Autopilot profileand are marked as &quot;Required&quot;; which will increase the time it takes to complete the setup. A good solution to this is to create two separate groups; one for the Autopilot Profile and another for managing application installations and patches. This approach ensures that only the specific applications you've selected will be installed during the Autopilot process, streamlining the setup and preventing unnecessary app installations. I would also suggest setting up 3rd group to include all of your Intune users, this should also be a Dynamic group. "},{"title":"Dynamic Queries​","type":1,"pageTitle":"Autopilot Setup Suggestions","url":"/docs/Intune/Autopilot/Autopilot Setup Suggestions#dynamic-queries","content":"Setting up the groups as Dynamic Device groups will automate the devices being added to each group respectively and remove an overhead. info Check out this Microsoft documentation for referenc. These can all be found in the MS link above. To create a group that includes all of your Autopilot devices, enter: (device.devicePhysicalIDs -any (_ -contains &quot;[ZTDID]&quot;)).To create a group that includes all Autopilot devices with a specific group tag (the Azure AD device OrderID), enter: (device.devicePhysicalIds -any (_ -eq &quot;[OrderID]:179887111881&quot;)).To create a group that includes all your Autopilot devices with a specific Purchase Order ID, enter: (device.devicePhysicalIds -any (_ -eq &quot;[PurchaseOrderId]:76222342342&quot;)). "},{"title":"Conditional Access​","type":1,"pageTitle":"Autopilot Setup Suggestions","url":"/docs/Intune/Autopilot/Autopilot Setup Suggestions#conditional-access","content":"Conditional Access is one of your lines of defence against unauthorised access to company resources in the cloud; you'll need a policy to ensure only compliant devices are able to access the organisation. Sign in to the Microsoft Entra admin center.Browse to Protection &gt; Conditional Access.Select + New policy, and then select Create new policy. Create the following settings to ensure only compliant devices are allowed access: Assignment: Users: Include All Intune Users.Target Resources: All Cloud Apps.Conditions: DevicePlatforms (Windows), Locations (Include all, exclude Offices). Access Controls: Grant: Require Device to be compliant.  Created: 2023-09-21, Last Updated: 2023-09-21 "},{"title":"Updating a Citrix Cloud Image","type":0,"sectionRef":"#","url":"/docs/Citrix/Updating a Citrix Cloud Image","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#document-control","content":"Created: xLast Updated: x (date in reverse format.) "},{"title":"Before you begin​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#before-you-begin","content":"Gather up the updates that are needed to be applied to the Citrix image including: - Required Windows Security and Feature updates.Application Updates and changes.OS changes (That are not deploying via policy) Once you have your updates, liaise with your team or IT contact to arrange a change window with them, as the customer will want to test the update themselves first before they're rolled out to production. tip Change Window A good rule of thumb that's done me well, is to complete an image update over a 2 week period. The 1st week for rolling it out the test environment &amp; the 2nd week would be to deploy to the production environment. "},{"title":"Deploy changes to the test environment​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#deploy-changes-to-the-test-environment","content":"Locate the production template VM. "},{"title":"Snapshot the VM​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#snapshot-the-vm","content":"Locate the VM resource; search for it or follow the image below.Click Disks.Select the OS disk.Create Snapshot.Name the Snapshot appropriately, &quot;VMName-Before-&quot;insert update description here&quot;-dd-mm-yyyy-hh-hh&quot;. "},{"title":"Make any changes to the VM​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#make-any-changes-to-the-vm","content":"You should now remote into the VM and make any changes that you need to.Follow steps from the above section to take another Snapshot.Name it appropriately, &quot;VMName-prod-After-&quot;insert update description here&quot;-dd-mm-yyyy-hh-hh&quot;.Power off the template VM, you no longer need it running. "},{"title":"Update the test Citrix Image​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#update-the-test-citrix-image","content":"Access Citrix Cloud, https://citrix.cloud.com/.Click Manage under &quot;DaaS Standard for Azure&quot;.Select Manage in the top left and click Full Configuration.Select Machine Catalogs.Select the testing Catalogue, named &quot;Your Catalogue Name&quot;.Above the list of Catalogues,select Change Master Image.Click Next on the wizard to step 2.Select an image from the options available. (It points to the resource group where the template VM resides).Add a note under this to describe the updates that have been made. Make the note descriptive to explain what has been changed.Select the minimum functional level as required.Press Next.Leave the roll out strategy as On next shutdown unless you need to change this.Complete the wizard to complete this process. "},{"title":"Deploy changes to the production environment​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#deploy-changes-to-the-production-environment","content":""},{"title":"Update the master Image​","type":1,"pageTitle":"Updating a Citrix Cloud Image","url":"/docs/Citrix/Updating a Citrix Cloud Image#update-the-master-image","content":"Access Citrix Cloud, https://citrix.cloud.com/ and then follow the steps from the section above this, to update the master image of your production Machine Catalog. "},{"title":"Challenge 1 - File Download Script with PowerShell","type":0,"sectionRef":"#","url":"/blog/pwsh-challenge-001","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Creating the script​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#creating-the-script","content":""},{"title":"Basic functionality​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#basic-functionality","content":"Firstly, we'll create the logic outline, by that I mean, create the bare bones of the script without any error handling or console output. note I've seen parameter blocks written in multiple ways, I write them this way as I think they're more easily understood by those who are not familiar with them. &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter(Mandatory=$true)] [string] $Source, [Parameter(Mandatory=$true)] [string] $Destination ) &lt;# Bare bones of the command to download an item. #&gt; Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download  Running the above script file by type .\\TOOL-File-download.ps1 -Source &quot;https://go.microsoft.com/fwlink/p/?LinkID=2195167&amp;clcid=0x409&amp;culture=en-us&amp;country=US&quot; -Destination C:\\Temp\\Server2019.iso does the job; the output is below. Now to add the ability to see running jobs and historic jobs. "},{"title":"Adding running and historic job reports​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#adding-running-and-historic-job-reports","content":"As you can see below, this is becoming a bit longer but, I would not say it is getting any more complex.  &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [switch] $JobReport, [Parameter()] [switch] $JobHistory ) ###### Add the ability to review in-progress download job(s). ###### if ($JobReport) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting running downloads.&quot; Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } ###### Add the ability to review historic job(s). ###### if ($JobHistory) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting historic downloads.&quot; Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize }  Now to add a way to cancel running jobs. "},{"title":"Canceling jobs​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#canceling-jobs","content":"Below I have added the code to cancel a running job, although a bit basic and rough it does work.  &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [String] $CancelJob ) ###### Add the ability to cancel job(s). ###### if ($CancelJob) { &lt;# Action to perform if the condition is true #&gt; Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize }  "},{"title":"Adding in some error handling and console output​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#adding-in-some-error-handling-and-console-output","content":"Below I have added in some 'fluff', some try\\catch blocks and some write-host functionality to make using this a bit easier. Try\\Catch blocks are a godsend when it comes to error handling, essentially it means try what is in the try area and catch anything that comes out of it. "},{"title":"Downloading the file section​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#downloading-the-file-section","content":"###### Download a file. ###### if ($Source) { &lt;# Action to perform if the condition is true #&gt; try { Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName Write-Host &quot;Beginning download from $($Source).&quot; Write-Host &quot;&quot; # This just adds some more space in the console. } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when starting the job.&quot; $_ } }  "},{"title":"Canceling the download section​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#canceling-the-download-section","content":" ###### Add the ability to cancel job(s). ###### if ($CancelJob) { &lt;# Action to perform if the condition is true #&gt; try { Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer Write-Host &quot;Job cancelled successfully.&quot; -ForegroundColor Green Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 2 Write-Host &quot;Remaining jobs listed below.&quot; -ForegroundColor Yellow Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 1 Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when cancelling job.&quot; $_ } }  "},{"title":"Full Script​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#full-script","content":" &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [string] $Source, [Parameter()] [string] $Destination, [Parameter()] [string] $JobName, [Parameter()] [switch] $RunningJobs, [Parameter()] [switch] $JobHistory, [Parameter()] [String] $CancelJob ) ###### Download a file. ###### if ($Source) { &lt;# Action to perform if the condition is true #&gt; try { Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName Write-Host &quot;Beginning download from $($Source).&quot; Write-Host &quot;&quot; # This just adds some more space in the console. } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when starting the job.&quot; $_ } } ###### Add the ability to review in-progress download job(s). ###### if ($RunningJobs) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting running downloads.&quot; Write-Host &quot;&quot; # This just adds some more space in the console. Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } ###### Add the ability to review historic job(s). ###### if ($JobHistory) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting historic downloads.&quot; Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } ###### Add the ability to cancel job(s). ###### if ($CancelJob) { &lt;# Action to perform if the condition is true #&gt; try { Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer Write-Host &quot;Job cancelled successfully.&quot; -ForegroundColor Green Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 2 Write-Host &quot;Remaining jobs listed below.&quot; -ForegroundColor Yellow Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 1 Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when cancelling job.&quot; $_ } }  "},{"title":"Bonus: Multiple downloads​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#bonus-multiple-downloads","content":"The Start-BitsTransfer command supports pipeline input, so you can add multiple download links using a text file. Create a text file in the format below, this is a typical csv format. ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1690560380176/0d5d0ab7-5b77-4010-9ed7-e30d780a510a.png align=&quot;center&quot;) Additional Code was added to the script.  &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [string] $MultiJobDownload ) ###### Download multiple files. ###### if ($MultiJobDownload) { &lt;# Action to perform if the condition is true #&gt; try { Import-csv -Path $MultiJobDownload | Start-BitsTransfer -Asynchronous Write-Host &quot;Beginning download from listed sources.&quot; Write-Host &quot;&quot; # This just adds some more space in the console. Start-Sleep 1 Write-Host &quot; Sources and destinations below: -&quot; Get-Content -Path $MultiJobDownload } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when starting the job.&quot; $_ } }  "},{"title":"Command Reference","type":0,"sectionRef":"#","url":"/docs/PowerShell/Az/Command Reference","content":"Command Reference","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Formats and Conversions","type":0,"sectionRef":"#","url":"/docs/Certificate-Mgmt/Formats and Conversions","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#document-control","content":"Created: 2023-09-02Last Updated: 2023-09-16 "},{"title":"Certificate Formats​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#certificate-formats","content":"All you need to know is that there are several file extension types and encoding formats. Plus, in order to successfully install an SSL on your server, you need to know which type exactly your server or device requires. "},{"title":"X.509 certificate encoding formats and extensions​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#x509-certificate-encoding-formats-and-extensions","content":".pem, .crt, .ca-bundle, .cer, .p7b, *.p7s files contain one or more X.509 digital certificate files that use base64 (ASCII) encoding. You get one of those in a zip file. You may also encounter *.pfx files. This is an archive file format for storing several cryptographic objects in a single file. In the scope of SSL certificates for SSL/TLS client and SSL/TLS web server authentication, a .pfx file must contain the end-entity certificate (issued for your domain), a matching private key, and may optionally include an intermediate certification authority (a.k.a. a CA Bundle). All this is wrapped up in a single file which is then protected with a pfx password. A Private key must be kept secret and is something that you generate alongside with the certificate signing request (CSR) by using an available tool. "},{"title":"PEM (Base64 (ASCII))​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#pem-base64-ascii","content":"A PEM file is a text format, the pem file contains the certificates inforamtion in a Hash format, which can be placed into an application. .pem.crt.ca-bundle You can decode the Hash using a tool such as this online one, paste the text into the tool for it to show you the information. https://www.sslshopper.com/certificate-decoder.html  You can also do this using OpenSSL from your computer with the command openssl x509 -in certificate.crt -text -noout "},{"title":"PKCS#7 (Base64 (ASCII))​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#pkcs7-base64-ascii","content":"Are mostly used in Windows or Java-based server environments (e.g. Internet Information Server (IIS), MS Exchange server, Java Tomcat, etc). PKCS#7 certificate file includes the end-entity certificate (the one issued to your domain name), plus one or more trusted intermediate certification authority files. .p7b.p7s "},{"title":"DER (Binary)​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#der-binary","content":".der.cer These files are very often used for Microsoft IIS services. "},{"title":"PKCS#12 (Binary)​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#pkcs12-binary","content":".pfx.p12 "},{"title":"Convertion to different formats​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#convertion-to-different-formats","content":""},{"title":"Open SSL​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#open-ssl","content":""},{"title":"Installing Open SSL​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#installing-open-ssl","content":"Install Chocolatey (Package Manager), Link to document . "},{"title":"Using Open SSL​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#using-open-ssl","content":""},{"title":"Before you begin​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#before-you-begin","content":"Create a folder and place the pfx file into the folder.To load openssl, open cmd as admin, navigate to “C:\\Program Files\\OpenSSL-Win64”, run the start.bat file to launch openssl.Change to the folder containing the pfx file and run the following commands. "},{"title":"PFX file with separate key file​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#pfx-file-with-separate-key-file","content":"Follow the guidance in the above section before proceeding. Type the following commands into your admin command prompt. openssl pkcs12 -in nameofyourcertificate.pfx -nocerts -nodes -out privatekey.key openssl pkcs12 -in nameofyourcertificate.pfx -clcerts -nokeys -out certificate.cer This will create a privatekey.key file (containing the private keys) and certificate.cer (containing the certificate). "},{"title":"PFX to PEM with Private Key File​","type":1,"pageTitle":"Formats and Conversions","url":"/docs/Certificate-Mgmt/Formats and Conversions#pfx-to-pem-with-private-key-file","content":"Stack OverFlow link. Follow the guidance in the Before you begin section above before proceeding. To convert a PFX file to a PEM file that contains both the certificate and private key (you'll need the private key for the PFX file to do this). openssl pkcs12 -in filename.pfx -out cert.pem -nodes To convert a PFX file to separate public and private key PEM files (you'll need the private key for the PFX file to do this): Extracts the private key form a PFX to a PEM file: openssl pkcs12 -in filename.pfx -nocerts -out key.pem Exports the certificate (includes the public key only): openssl pkcs12 -in filename.pfx -clcerts -nokeys -out cert.pem Removes the password (paraphrase) from the extracted private key (optional): openssl rsa -in key.pem -out server.key "},{"title":"Code Snippet","type":0,"sectionRef":"#","url":"/docs/PowerShell/Az/Code Snippet","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Copy Azure Disk to Blob​","type":1,"pageTitle":"Code Snippet","url":"/docs/PowerShell/Az/Code Snippet#copy-azure-disk-to-blob","content":"# Source VM and Disk Informaiton. $sourcesubscriptionId = &quot;Blah Blah Blah&quot; $sourceResourceGroup = &quot;rg-Blah-Blah-Blah-Blah&quot; $sourceDisk = &quot;server_name-Disk-001&quot; $sourceDiskSASExpiryDuration = &quot;3600&quot; # Destination Storage Account Information. $destinationStorageAccount = &quot;Blobcontainername&quot; $destinationStorageContainer = &quot;BlahFolder&quot; $destinationStorageAccountKey = &quot;Blah Blah Blah&quot; $destinationVHDFileName = &quot;server_name-Disk-001.vhd&quot; # Select the source Subscription Write-Host &quot;Selecting the $($sourcesubscriptionId) subscription.&quot; -ForegroundColor Yellow Select-AzSubscription -SubscriptionId $sourcesubscriptionId # Generate the Shared Access Signature (SAS) expiry duration in seconds. Write-Host &quot;Generating Shared Access Signature for source disk, $($sourceDisk).&quot; -ForegroundColor Yellow $diskSASInfo = Grant-AzDiskAccess -ResourceGroupName $sourceResourceGroup -DiskName $sourceDisk -DurationInSecond $sourceDiskSASExpiryDuration -Access Read # Create the context of the storage account where the underlying VHD of the managed disk will be copied Write-Host &quot;Setting the Storage Account, $($destinationStorageAccount) as the destination.&quot; -ForegroundColor Yellow $destinationStorageAccountContext = New-AzStorageContext -StorageAccountName $destinationStorageAccount -StorageAccountKey $destinationStorageAccountKey  "},{"title":"Command Reference","type":0,"sectionRef":"#","url":"/docs/PowerShell/PowerShell-cheatsheet/Command Reference","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Try and Catch example for error debugging​","type":1,"pageTitle":"Command Reference","url":"/docs/PowerShell/PowerShell-cheatsheet/Command Reference#try-and-catch-example-for-error-debugging","content":"try { Connect-AzAccount -Identity } catch{ Write-Output &quot;Unable to login. Aborting.&quot;; exit }  "},{"title":"Test multiple item paths​","type":1,"pageTitle":"Command Reference","url":"/docs/PowerShell/PowerShell-cheatsheet/Command Reference#test-multiple-item-paths","content":"Test-Path Test multiple paths for files or folders. Test-Path &quot;$Variable1&quot;, &quot;$Variable2&quot;, &quot;$Variable3&quot;  "},{"title":"Import and filter CSV Files​","type":1,"pageTitle":"Command Reference","url":"/docs/PowerShell/PowerShell-cheatsheet/Command Reference#import-and-filter-csv-files","content":"ImportFrom-CSV $csvFile = Import-Csv 'C:\\Temp\\File.csv' # Edited export with devices status notes. # Filter Examples $csvFile | group osVersion $csvFile | group osVersion | select -ExpandProperty property Name| ft -AutoSize  "},{"title":"Get active SMB Connections​","type":1,"pageTitle":"Command Reference","url":"/docs/PowerShell/PowerShell-cheatsheet/Command Reference#get-active-smb-connections","content":"Get-SMBSession  "},{"title":"Useful Windows Device Configuration","type":0,"sectionRef":"#","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Minimum Steps to build via Autopilot​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#minimum-steps-to-build-via-autopilot","content":" Autopilot settings to get a Windows build working in a basic sense. Autopilot Build Guidance Autopilot Setup Suggestions "},{"title":"Deployment Methods​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#deployment-methods","content":"Scenario\tMore InformationDeploy and configure devices so that an end user can set it up for themselves\tWindows Autopilot user-driven mode Deploy devices to be automatically configured for shared use, as a kiosk, or as a digital signage device.\tWindows Autopilot self-deploying mode Pre-provision a device with up-to-date applications, policies, and settings.\tPre-provisioning Deploy Windows 10/11 on an existing Windows device\tWindows Autopilot for existing devices "},{"title":"Deployment Steps​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#deployment-steps","content":"Step 1: Import Devices into Autopilot The OEM can handle this upon purchase, just request it.Alternatively, you can manually obtain the hash information and upload it to Autopilot using this Microsoft link. Step 2: Set Up Dynamic Groups in Azure AD Intune - All Autopilot Devices - Use this query to target Autopilot profile.Intune - 3rd Party Patching - Use this query to target devices selected after Autopilot (to prevent app installations during Autopilot). Step 3: Create a Static Group for Users Name it Intune - All Intune Users. Step 4: Configure Automatic Enrollment for Windows Devices Sign in to the Azure portal, then go to Azure Active Directory &gt; Mobility (MDM and MAM) &gt; Microsoft Intune.Configure MDM User scope with Intune - All Intune Users selected. Step 5: Set Up a Test Account (Intune.Tester@) Add this account to Intune - All Intune Users group. Step 6: Configure Device Platform Restrictions Sign in to the Intune Admin Centre, then navigate to Devices &gt; Enroll devices &gt; Enrollment device platform restrictions.Modify Windows Restrictions to allow Corporate Enrollment and block personal. Step 7: Configure Device Categories Sign in to the Intune Admin Centre, then go to Devices &gt; Device categories.Add at least one category. Step 8: Configure Autopilot Enrollment Profile Sign in to the Intune Admin Centre, then navigate to Devices &gt; Enroll devices &gt; Windows Enrollment &gt; deployment profiles.Create a profile and configure settings.Assign it to the Intune - All Autopilot Devices group. Step 9: Configure Enrollment Status Page Sign in to the Intune Admin Centre, then go to Devices &gt; Enroll devices &gt; Windows Enrollment &gt; Enrollment Status Page.Edit the Default option already set up.Assign it to All Devices. Step 10: Additional Configuration Assign the Config profile &amp; Compliance Profile to the All Autopilot Devices group.Assign the Application deployment to your Intune - 3rd Party Patching group.Create a Device Encryption endpoint security policy.Enable Defender for Endpoint Antimalware protection as needed. "},{"title":"Device Configuration Profiles​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#device-configuration-profiles","content":" These are some standardised Config profiles that could be considered for deployment. Below is a quick look, select from the list to the right for the settings. info The format below is as follows: Profile name (Type of Policy) Policy Group\\Confgurable setting. Windows – Custom Branding This one requires a Storage Account in Azure, google how to do this. Windows – Device Restrictions (Device Restriction Policy) AppStore\\Use Private Store Only: AllowCloud and Storage\\Microsoft Account: BlockCloud and Storage\\Non-Microsofft Account: Block Windows – Disable Microsoft Store (Admin Template) Windows Components\\Store\\Turn Off the offer to update to the latest version of Windows (User): EnabledWindows Components\\Store\\Turn off the store application (User): Enabled Windows – Enable Location Services (Settings Catalog) Privacy\\Let Apps Access Location: Force Allow. Windows – Enable Memory Integrity (Settings Catalog) Virtualization Based technology\\Hypervisor Enforced Code Integrity: (Enabeld with UEFI lock) Turns on Hypervisor-Protected Code Integrity with UEFI Lock. Windows – Hybrid Cloud Trust Configuration (Necessary for a hybrid-on-prem WHfB solution.)Windows – Lock Screen Password Reset (Setting Catalgo) Authentication\\Allow Aad password Reset: Allow Windows – Mapped Drives (ADMX Import)Windows – Microsoft Edge SettingsWindows – OneDrive Configuration (Admin Template) Silently sign in users to the OneDrive sync app with their Windows credentials: EnabledSet the default location for the OneDrive folder: EnabledPrevent users from syncing personal OneDrive accounts: EnabledAllow syncing OneDrive accounts for only specific organizations: EnabledPrevent users from changing the location of their OneDrive folder: Enabled Wndows – Remove Teams Chat Icon Experience\\Configure chat icon: Disabled Windows – Trusted Locations Set office apps trusted locations. Windows – Offline Root CA CertificateWindows – Windows Update for Business Reporting (Requires Azure resources.) System\\Allow commercial data pipeline: EnabledSystem\\Allow device name to be sent in Windows diagnostic data: Allowed.System\\Allow Telemetry: FullSystem\\Allow update compliance Processing: EnabledSystem\\Configure Telemetry opt-in change notification: Disable telemetry change notificationsSystem\\Configure telemetry opt-in settings UX Windows - Windows Hello for Business (This can be done from the enrolment area for all users) Windows Hello for Business\\Configure Windows hello for business: EnableWindows Hello for Business\\Minimum PIN length: 6Windows Hello for Business\\Maximum PIN length: 127Windows Hello for Business\\Lowercase letters in PIN: AllowedWindows Hello for Business\\Uppdatecase letters in PIN: AllowedWindows Hello for Business\\Special Characters in PIN: AllowedWindows Hello for Business\\Pin Expiry: NeverWindows Hello for Business\\Enable PIN recovery: EnableWindows Hello for Business\\Use TPM: EnableWindows Hello for Business\\Allow biometric Auth: Enable "},{"title":"Compliance Policies​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#compliance-policies","content":" Policy Name Suggestion: Windows - Default Compliance Policy Settings to Configure: Device Health: Bitlocker: RequiredSecure Boot: RequiredCode Integrity: Required System Security: Require Password type: Device DefaultRequire Encryption of data storage on device: RequiredFirewall: RequiredTrusted Platform Moduel (TPM): RequiredMicrosoft Defender AntiMalware: RequiredReal-Time protection: Enabled- Microsoft Defender for Endpoint: Require the device to be ad or under the machine risk score: Medium "},{"title":"Update Rings​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#update-rings","content":" "},{"title":"Pilot Policy​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#pilot-policy","content":"Policy Name Suggestion: Windows - Pilot Settings to Configure: Update Ring settings: Microsoft Product Updates: AllowWindows Drivers: AllowQuality update deferral period (days): 3Feature update deferral period (days): 60Update Windows 10 devices to the latest Win 11 release: NoSet feature update uninstall period: 10Servicing Channel: General Availability User Experience Settings Automatic Update behavior: Auto install at maintenance timeActive hours start: 1 PMActive hours end: 4 PMRestart checks: AllowedOption to pause Windows updates: DisabledOption to check for Windows updates: EnabledChange notification update level: Use the defaultUse deadline settings: AllowedDeadline for feature updates: 1Deadline for quality updates: 2Grace period: 1Auto reboot before deadline: No "},{"title":"Production policy​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#production-policy","content":"Policy Name Suggestion: Windows - Production Settings to Configure: Update Ring settings: Microsoft Product Updates: AllowWindows Drivers: AllowQuality update deferral period (days): 5Feature update deferral period (days): 90Update Windows 10 devices to the latest Win 11 release: NoSet feature update uninstall period: 10Servicing Channel: General Availability User Experience Settings Automatic Update behavior: Auto install at maintenance timeActive hours start: 1 PMActive hours end: 4 PMRestart checks: AllowedOption to pause Windows updates: DisabledOption to check for Windows updates: EnabledChange notification update level: Use the defaultUse deadline settings: AllowedDeadline for feature updates: 1Deadline for quality updates: 2Grace period: 1Auto reboot before deadline: No "},{"title":"Endpoint Security​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#endpoint-security","content":" The settings below are some basics when setting up Endpoint Security, there are more to be considered. "},{"title":"Security Baselines​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#security-baselines","content":"Baselines are provided for and maintained by Microsoft to make deployment of remediations easier and standard. Updates to policies are provided through updated version of the policies. Microsoft document link explaining baselines. caution You must update the version of the baselines yourself, Microsoft will deploy new versions of the policy but, they will not update in your environment themselves. Example of changing baselines Windows 10/11 baseline​ Microsoft doc link to the baseline "},{"title":"Disk Encryption (Bitlocker)​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#disk-encryption-bitlocker","content":"Setting below are for silently encrypting device without user input or the user adding a Pin. Needs filling out! Section needs some meat adding. "},{"title":"Antivirus​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#antivirus","content":"Policy Name Suggestion: Windows - Default AV Policy Settings to Configure: Defender: Allow Archive Scanning: Allowed.Allow Behavior Monitoring: AllowedAllow Cloud Protection: AllowedAllow full scan on mapped network drives: Not allowedAllow Full scan removable disk scanning: Allowed[Deprecation] Allow Intrusion Prevention System: AllowedAllow scanning of all downloaded files and attachments: AllowedAllow real-time scanning: AllowedAllow scanning network files: Not allowedAllow user UI Access: AllowedCheck for signatures before running scan: EnabledDays to retain clean malware: 3Disable catch-up full scan: EnabledDisable catch-up quick scan: EnabledEnable network protection: Enabled (Audit mode)Excluded Paths: Your discretion, include Intune management extension content folder.PUA protection: Audit modeSignature update interval: 24Submit samples consent: Send safe samples automatically. "},{"title":"Scripts and Remediations​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#scripts-and-remediations","content":" Below are some examples of applying scripts and remediations to deploy from Intune. "},{"title":"Set the Default Windows Language (Script)​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#set-the-default-windows-language-script","content":"This can be done via policy now however, this is a tried &amp; tested method for doing this: # sets system locale Set-WinSystemLocale en-GB Set-Culture en-GB # Sets GeoID to UK region Set-WinHomeLocation -GeoId 242 # Sets current user language Set-WinUserLanguageList en-GB -Force  "},{"title":"Disable access to FTP.exe (Remedition)​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#disable-access-to-ftpexe-remedition","content":"This remediation script will detect if the BUILTIN\\Users group has access to launch the ftp.exe application. Detection Script​ try { $acl = Get-Acl C:\\Windows\\System32\\ftp.exe if($acl.Access.identityReference.value -eq 'BUILTIN\\Users') { Write-Warning &quot;Not Compliant&quot; Exit 1 } else { Write-Output &quot;Compliant&quot; Exit 0 } } catch { Write-Warning &quot;Not Compliant&quot; Exit 1 }  Remediation Script​ This will remove all of the permissions from the object &amp; then set the permissions that are needed. # The Script gathers the existing acl's on the .exe and then defines a new object matching the acl without touching inheritance $acl = Get-Acl C:\\Windows\\System32\\ftp.exe $inherit =[system.security.accesscontrol.InheritanceFlags]&quot;ContainerInherit,ObjectInherit&quot; $propagation =[system.security.accesscontrol.PropagationFlags]&quot;None&quot; $accessrule = New-Object System.Security.AccessControl.FileSystemAccessRule(&quot;BUILTIN\\Users&quot;,&quot;ReadAndExecute&quot;, $inherit, $Propagation ,,,&quot;Allow&quot;) #The access rule is removed from the acl and the acl is then written to the .exe $acl.RemoveAccessRuleAll($accessrule) Set-Acl -AclObject $acl C:\\Windows\\System32\\ftp.exe  "},{"title":"Disable Fast Startup​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#disable-fast-startup","content":"This stops Windows loading apps into Storage when shutting down. Detection Script​ $Path = &quot;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power&quot; $Name = &quot;HiberbootEnabled&quot; $Type = &quot;DWORD&quot; $Value = 0 Try { $Registry = Get-ItemProperty -Path $Path -Name $Name -ErrorAction Stop | Select-Object -ExpandProperty $Name If ($Registry -eq $Value){ Write-Output &quot;Compliant&quot; Exit 0 } Write-Warning &quot;Not Compliant&quot; Exit 1 } Catch { Write-Warning &quot;Not Compliant&quot; Exit 1 }  Remediation Script​ New-ItemProperty -LiteralPath 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power' -Name 'HiberbootEnabled' -Value 0 -PropertyType DWord -Force -ea SilentlyContinue;  "},{"title":"Uninstall Apps​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#uninstall-apps","content":"Specifically a section on removing stubborn apps or bloatware. Lenovo AI Meeting App​ Detection Script: Try { If (Test-path -Path &quot;C:\\Program Files\\WindowsApps\\E046963F.AIMeetingManager_3.1.18.0_×64__k1h2ywk1493x8&quot;){ Write-Output &quot;Not Compliant&quot; Exit 1 } Write-Warning &quot;Compliant&quot; Exit 0 } Catch { Write-Warning &quot;Not Compliant&quot; Exit 1 }  Remediation Script: Remove-AppxPackage -AllUsers E046963F.AIMeetingManager_3.1.18.0_×64__k1h2ywk1493x8  "},{"title":"Applications​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#applications","content":" Section on adding\\removing applications from Windows build. "},{"title":"Removing Windows Bloatware​","type":1,"pageTitle":"Useful Windows Device Configuration","url":"/docs/Intune/Device-Configuration-&-Oboarding/Windows Device Config#removing-windows-bloatware","content":"Create a new application for deployment.Select Microsoft store (new).Search for the apps that need removing.Set install behaviour to System.Assignment group should be added to uninstall. If you cannot find the apps in the list, browser to the microsoft store via browser. Take the app ID from the url.  Created: 2023-09-23, Last Updated: 2023-10-01 "},{"title":"Diagnose Autopilot Errors","type":0,"sectionRef":"#","url":"/docs/Intune/Autopilot/Diagnose Autopilot Errors","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Diagnose Autopilot Errors","url":"/docs/Intune/Autopilot/Diagnose Autopilot Errors#document-control","content":"Created: 2023-09-20Last Updated: 2023-09-20 "},{"title":"Collecting the log files​","type":1,"pageTitle":"Diagnose Autopilot Errors","url":"/docs/Intune/Autopilot/Diagnose Autopilot Errors#collecting-the-log-files","content":"Initiate the build of a machine firstly and wait for this to fail. Load Command Prompt as an Administrator: This can be done with one of the following key combinations, Shift + F10, Alt + Shift + F10 or Fn + Shift + F10, it differs for each model of machine.Load Powershell: Type the command Powershell into the Command Prompt window.Create a new Folder to store the logs: Type, New-Item -Path C:\\ -Name Temp -ItemType Directory into the Powershell window to create a new Temp folder a the root of C:\\.Collect the Autopilot logs: Type, MdmDiagnosticsTool.exe -area Autopilot -zip C:\\$env:USERPROFILE\\Desktop\\mdmDiag.zip, this will give you a status once completed. "},{"title":"Read the log files​","type":1,"pageTitle":"Diagnose Autopilot Errors","url":"/docs/Intune/Autopilot/Diagnose Autopilot Errors#read-the-log-files","content":"Once you have the logs, you'll need to downlad a script that will then print out only the necessary errors and filter out the &quot;noise&quot; (the log files are horrible to sift through)! Install the script to parse the logs: Type, Install-Script -Name Get-AutopilotDiagnostics -Scope CurrentUser, this should prompt for a Y\\N to proceed.Run the script against the zipped logs files: Type,Get-AutopilotDiagnostics.ps1 -ZIPFile C:\\Temp\\mdmDiag.zip, this will then spit out the relevant information to inform you what has caused the error. "},{"title":"Known problems (And solutions)​","type":1,"pageTitle":"Diagnose Autopilot Errors","url":"/docs/Intune/Autopilot/Diagnose Autopilot Errors#known-problems-and-solutions","content":"These are issues I have encountered before. "},{"title":"Application install errors​","type":1,"pageTitle":"Diagnose Autopilot Errors","url":"/docs/Intune/Autopilot/Diagnose Autopilot Errors#application-install-errors","content":"This has been the most common cause for the Autopilot builds to fail in my experience. info Applications in Intune that have a &quot;Required&quot; installation for users, devices or to a group, will be installed during the AutoPilot process. Perform the steps from the sections above.Review the errors in the output, make not of the application IDs.Export a report of the Apps from the Intune\\Endpoint Manager portal, this includes the App IDs.Check the Application IDs match and remove the &quot;Required&quot; assignment. "},{"title":"Terms and Conditions Error​","type":1,"pageTitle":"Diagnose Autopilot Errors","url":"/docs/Intune/Autopilot/Diagnose Autopilot Errors#terms-and-conditions-error","content":"I have seen recently an error appear explaining that something has gone wrong due to the terms and conditions not having been accepted. This problem does not seem to break\\stop the build from completing but, does appear to the end user. Check if you have blocked the Ts &amp; Cs window from showing via the Autopilot profile.Allow it for a breif time to remove the error showing for end users. So far we've not been able to fix this problem. "},{"title":"Git Cheatsheet","type":0,"sectionRef":"#","url":"/docs/PowerShell/Git/Git Cheatsheet","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#document-control","content":"Created: 23/05/06Last Updated: 23/05/06 "},{"title":"Repo Status​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#repo-status","content":"# make sure to change location to the local git repo folder. # Get git status update, this will tell you the status of commits, if you need to add un-tracked files, or push\\pull updates. git status  "},{"title":"Stage files​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#stage-files","content":"# Add untracked file to git for commit (stage the file). git add 'file name'  "},{"title":"Un-stage files​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#un-stage-files","content":"# To unstage (remove) all files that have not been committed, -f = Force, -d = Directory git reset -f -d  "},{"title":"Commit staged files​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#commit-staged-files","content":"# Commit staged changes to repo. git commit -m &quot;COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT&quot; # Stage all changes and commit with comment, -a = all changes, -m = main branch. git commit -a -m &quot;COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT&quot;  "},{"title":"Push changes to remote Repo​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#push-changes-to-remote-repo","content":" # Push your commited changes to remote repo. Git push  "},{"title":"Un-do recent commit​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#un-do-recent-commit","content":"# To undo the most recent commit - A Git commit should not be reversed if you already pushed it to the remote repository. git reset HEAD~1  "},{"title":"Merge branch into main\\master​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#merge-branch-into-mainmaster","content":"# When you are ready to add your changes to the default branch, you merge the feature branch into it git checkout 'default-branch' git merge 'feature-branch'  "},{"title":"Calendar Sharing Error","type":0,"sectionRef":"#","url":"/docs/Windows-OS/Office-Apps/Calendar Sharing Error","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"The Error​","type":1,"pageTitle":"Calendar Sharing Error","url":"/docs/Windows-OS/Office-Apps/Calendar Sharing Error#the-error","content":"There was a problem connecting you to the shared calendar. Please ask the person who invited you to send another sharing invitation.  "},{"title":"Too Long; Didn't Read​","type":1,"pageTitle":"Calendar Sharing Error","url":"/docs/Windows-OS/Office-Apps/Calendar Sharing Error#too-long-didnt-read","content":"Check in Exchange Online configuration for a confidentiality footer being appended onto every outbound message via a mail flow rule. The rule was using a fallback method of wrapping the messages if it couldn't modify the original message. Consequently, the shared calendar invitations were showing up in the recipient mailboxes as attachments.Change the rule to &quot;Ignore&quot; instead of &quot;Wrap&quot; when the rule couldn't alter the original message. "},{"title":"Check Defender AV Status","type":0,"sectionRef":"#","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#document-control","content":"Created: 2023-09-20Last Updated: 2023-09-20 "},{"title":"Checking the Status​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#checking-the-status","content":"Click the Start button.In the search bar, type PowerShell, then right-click on the top result.From the context menu, select Run as administrator.In the PowerShell window that opens, type the following command and press Enter: Get-MpComputerStatus  Look for the AntivirusEnabled value, and make sure it reads True to confirm that the security solution is running.  "},{"title":"Check for AV Updates​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#check-for-av-updates","content":"This command will check for all types of updates, definitions and configuration changes. Open PowerShell as an Administrator.Type the following command to start the update process. Update-MpSignature   "},{"title":"Running Scans using PowerShell​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#running-scans-using-powershell","content":"This section outlines how to run the different types of scans using Powershell commands, this includes Quick Scans, Full scans and Custom scans. "},{"title":"Quick Scan​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#quick-scan","content":"A quick scan is useful to do as part of troubleshooting a desktop issue (when called for, it's random to throw in for just anything). Open PowerShell as an Administrator.Type the following command to start the update process. Start-MpScan -ScanType QuickScan   "},{"title":"Full Scan​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#full-scan","content":"A Full scan is perfect for running on a machine that has either had an alert to say that something malicious has been found or you suspect something malicious is going on with it. Resource Consumption Running a full scan is quite resource intensive on the endpoint, be aware it may run slowly or &quot;hot&quot; for a while when doing this. Open PowerShell as an Administrator.Type the following command to start the update process. Start-MpScan -ScanType FullScan  "},{"title":"Custom Scans​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#custom-scans","content":"Custom scans are useful to perform a scan of a particular location, good for limiting resource consumption and time for the scan. Example of the syntax for the commmand: Start-MpScan -ScanType CustomScan -ScanPath PATH\\TO\\FOLDER-FILES  Example of scanning the downloads folder: Start-MpScan -ScanType CustomScan -ScanPath &quot;C:\\Users\\user\\Downloads&quot;  "},{"title":"Sheduling a Scan​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#sheduling-a-scan","content":"Scheduling a scan is good practice for most security teams; normally though this automation is not needed and is carried out by Defender. Example of the syntax for the command: Set-MpPreference -ScanScheduleQuickScanTime SCAN-TIME  Example for setting up a daily scan at 6am (24-hour format): Set-MpPreference -ScanScheduleQuickScanTime 06:00:00  info To reset the scan schedule to its default settings, you can either specify no time value or set the time to two hours after midnight. "},{"title":"Excluding Locations​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#excluding-locations","content":"This is a necessary process for some applications to function properly, it's common to exclude fodler paths. Example syntax for the command: Set-MpPreference -ExclusionPath PATH\\TO\\FOLDER  Example for excluding the loction C:\\Users: Set-MpPreference -ExclusionPath C:\\Users  "},{"title":"Disabling AV​","type":1,"pageTitle":"Check Defender AV Status","url":"/docs/Windows-OS/Defender-for-Endpoint/Check Defender AV Status#disabling-av","content":"This maybe needed for troubleshooting purposes, it should not be used lightly or forgotten to be re-enabled. Although Microsoft Defender offers a command to disable the antivirus, it's guarded by the Tamper Protection feature, which you can only disable through the Virus &amp; threat protection settings available in the Windows Security app. Set-MpPreference -DisableRealtimeMonitoring $true  "},{"title":"Grant access to a User’s OneDrive","type":0,"sectionRef":"#","url":"/docs/SharePoint/Grant access to a User’s OneDrive","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Too Long; Didn't Read​","type":1,"pageTitle":"Grant access to a User’s OneDrive","url":"/docs/SharePoint/Grant access to a User’s OneDrive#too-long-didnt-read","content":"To create a temporary link into the user's OneDrive for quick access for the Admin: In the admin center, go to the Users &gt; Active users page.Select a user.On the user properties page, select OneDrive. Under Get access to files, select Create link to files.Select the link to open the file location. Download the files to your computer, or select Move to or Copy to to move or copy them to your own OneDrive or to a shared library. To permenantly grant access to another user's OneDrive data: Sign in to the admin center as a global admin or SharePoint admin.Select Admin centers &gt; SharePoint &gt; More features.Under User profiles, select Open.Under People, select Manage User Profiles.Search for the Employee's name, Select Find.Right-click the user, and then choose Manage site collection owners.Add the user to Site collection administrators and select OK. "},{"title":"Access a former user's OneDrive documents​","type":1,"pageTitle":"Grant access to a User’s OneDrive","url":"/docs/SharePoint/Grant access to a User’s OneDrive#access-a-former-users-onedrive-documents","content":" If you remove a user's license but don't delete the account, you can give yourself access to the content in the user's OneDrive. If you delete the user's account, you have 30 days by default to access the former user's OneDrive data. Learn how to set the OneDrive retention for deleted users. If you don't restore a user account within this time, their OneDrive content is deleted. To preserve a former user's OneDrive files, first give yourself access to their OneDrive, and then move the files you want to keep. In the admin center, go to the Users &gt; Active users page.Select a user.On the user properties page, select OneDrive. Under Get access to files, select Create link to files.Select the link to open the file location. Download the files to your computer, or select Move to or Copy to to move or copy them to your own OneDrive or to a shared library. info You can move or copy up to 500 MB of files and folders at a time.When you move or copy documents that have version history, only the latest version is moved.Administrative options for an active user under the OneDrive tab in the Microsoft 365 admin center are currently not supported for multi-geo tenants. "},{"title":"You can also grant access to another user to access a former employee's OneDrive​","type":1,"pageTitle":"Grant access to a User’s OneDrive","url":"/docs/SharePoint/Grant access to a User’s OneDrive#you-can-also-grant-access-to-another-user-to-access-a-former-employees-onedrive","content":" Permissions Error If you get a message that you don't have permission to access the admin center, then you don't have administrator permissions in your organization. Sign in to the admin center as a global admin or SharePoint admin.In the left pane, select Admin centers &gt; SharePoint. (You might need to select Show all to see the list of admin centers.)If the classic SharePoint admin center appears, select Open it now at the top of the page to open the SharePoint admin center.In the left pane, select More features.Under User profiles, select Open.Under People, select Manage User Profiles.Enter the former employee's name and select Find.Right-click the user, and then choose Manage site collection owners.Add the user to Site collection administrators and select OK.The user will now be able to access the former employee's OneDrive using the OneDrive URL. "},{"title":"Revoke admin access to a user's OneDrive​","type":1,"pageTitle":"Grant access to a User’s OneDrive","url":"/docs/SharePoint/Grant access to a User’s OneDrive#revoke-admin-access-to-a-users-onedrive","content":" You can give yourself access to the content in a user's OneDrive, but you may want to remove your access when you no longer need it. Permissions Error If you get a message that you don't have permission to access the admin center, then you don't have administrator permissions in your organization. Sign in to the admin center as a global admin or SharePoint admin.In the left pane, select Admin centers &gt; SharePoint. (You might need to select Show all to see the list of admin centers.)If the classic SharePoint admin center appears, select Open it now at the top of the page to open the SharePoint admin center.In the left pane, select More features.Under User profiles, select Open.Under People, select Manage User Profiles.Enter the user's name and select Find.Right-click the user, and then choose Manage site collection owners.Remove the person who no longer needs access to the user's data, and then select OK. Created: 2023-20-14, Last Updated: 2023-20-14 "},{"title":"Network Security Groups","type":0,"sectionRef":"#","url":"/docs/Azure/Networking/Network Security Groups","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Rules and Priorities​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#rules-and-priorities","content":""},{"title":"Service Tags​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#service-tags","content":"Virtual Network Service tags | Microsoft doc link A service tag represents a group of IP address prefixes from a given Azure service. Microsoft manages the address prefixes encompassed by the service tag and automatically updates the service tag as addresses change, minimizing the complexity of frequent updates to network security rules. "},{"title":"Rule Priority​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#rule-priority","content":"A number between 100 and 4096. Rules are processed in priority order, with lower numbers processed before higher numbers, because lower numbers have higher priority. Once traffic matches a rule, processing stops. As a result, any rules that exist with lower priorities (higher numbers) that have the same attributes as rules with higher priorities aren’t processed. "},{"title":"Inbound Rule Suggestions​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#inbound-rule-suggestions","content":"Inbound 100 to 109​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes100 to 109 100 to 109 available for overrides  Inbound 110 to 199​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes200\tDeny-Internet-to-Any\tAny\tAny\tInternet (Service tag)\tAny\tDeny\tDeny All inbound Internet access. 200 to 299\tAllow any internal vNet services\t-\t-\t-\t-\t-\tAllow any internal vNet services Inbound 300​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes300\tDeny-From-VNET-to-VNET\tAny\tAny\tAny\tAny\tDeny\t- Inbound 301 to 64999​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes301 to 64999\tFor non-vnet or internet facing rules\t-\t-\t-\t-\t-\tFor non-vnet or internet facing rules Inbound 65000 to 65500​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes65000\tAllowVnetInBound\tAny\tAny\tVirtualNetwork\tVirtualNetwork\tAllow\tBuilt in Rule 65000 to 65500\tAre built in rules\t-\t-\t-\t-\t-\tAre built in rules Inbound 65500 to 65501​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes65500\tAllowAzureLoadBalancerInBound\tAny\tAny\tAzureLoadBalancer\tAny\tAllow\tBuilt in Rule 65501\tDenyAllInBound\tAny\tAny\tAny\tAny\tDeny\tBuilt in Rule "},{"title":"Outbound Rule Suggestings​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#outbound-rule-suggestings","content":"Outbound 100 to 109​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes100 to 109 100 to 109 available for overrides  Outbound 110 to 199​ Priority\tName\tPort\tProtocol\tSource\tDestination\tAction\tNotes110 to 199\tAllow any inbound services Allow any inbound services 111\tAllow http\t80\tTCP\t-\tInternet (Sevice Tag)\tAllow\tAllow http services to internet 112\tAllow https\t443\tTCP\t-\tInternet (Service Tag)\tAllow\tAllow https services to internet 114\tAllow-DNS-to-MicrosoftAzure\t53\tAny\t-\t168.63.129.16\tAllow\tAllow DNS to Azure DNS IP 115\tAllow-AADConnect-to-AzureAD\t443,80\tTCP\t-\tAzureAzureActiveDirectory (Service Tag)\tAllow\tAllow Allow AAD Connect services. 116\tAllow-Azuresiterecovery\t443,80\tTCP\t-\tAzureSiteRecovery (Service Tag)\tAllow\tAllow Azure Site Recovery services. 117\tAllow-AzureKeyVault\t443,80\tTCP\t-\tAzureKeyVault (Service Tag)\tAllow\tAllow Azure Key Vault services. (Dependency for ASR). 118\tAllow-GuestAndHybridManagement\t443,80\tTCP\t-\tGuestAndHybridManagement (Sevice Tag)\tAllow\tAllow Guest and Hybrid Management services. (Dependency for ASR, AzMonitor). 119\tAllow-Storage\t443,80\tTCP\t-\tStorage (Service Tag)\tAllow\tAllow Storage services. (Dependency for ASR, AzMonitor). 120\tAllow-EventHub\t443,80\tTCP\t-\tEventhub (Service Tag)\tAllow\tAllow Event Hub services. (Dependency for ASR). 121\tAllow-AzureMonitor\t443,80\tTCP\t-\tAzureMonitor (Service Tag)\tAllow\tAllow Event Hub services. (Dependency for ASR). 122\tAllow-WindowsUpdate-AzUpdateDeliver\t443,80\tTCP\t-\tAzureUpdateDelivery (Service Tag)\tAllow\tAllow Az update delivery services. 123\tAllow-WindowsUpdate-AzFrontDoorFP\t443,80\tTCP\t-\tAzureFrontDoor.FirstParty (Service Tag)\tAllow\tAllow Az update delivery services. "},{"title":"Flow Logs​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#flow-logs","content":"NSG flow logs is a feature of Azure Network Watcher that allows you to log information about IP traffic flowing through a network security group (NSG). Flow data is sent to Azure Storage from where you can access it and export it to any visualization tool. Flow logs for network security groups | Microsoft doc link "},{"title":"Common use cases​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#common-use-cases","content":"Sources All of the below information has been ripped out of a Microsoft doc, not my original material. "},{"title":"Network monitoring​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#network-monitoring","content":"Identify unknown or undesired traffic.Monitor traffic levels and bandwidth consumption.Filter flow logs by IP and port to understand application behavior.Export flow logs to analytics and visualization tools of your choice to set up monitoring dashboards. "},{"title":"Usage monitoring and optimization​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#usage-monitoring-and-optimization","content":"Identify top talkers in your network.Combine with GeoIP data to identify cross-region traffic.Understand traffic growth for capacity forecasting.Use data to remove overly restrictive traffic rules. "},{"title":"Compliance​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#compliance","content":"Use flow data to verify network isolation and compliance with enterprise access rules.Network forensics and security analysisAnalyze network flows from compromised IPs and network interfaces.Export flow logs to any SIEM or IDS tool of your choice. "},{"title":"Reading the flow log​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#reading-the-flow-log","content":"Logs are in JSON format and will be outputting in the json file format.The information that is interesting is in the flowtuples section of the json file. "},{"title":"Example flow log entry​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#example-flow-log-entry","content":"{ &quot;records&quot;: [ { &quot;time&quot;: &quot;2018-11-13T12:00:35.3899262Z&quot;, &quot;systemId&quot;: &quot;a0fca5ce-022c-47b1-9735-89943b42f2fa&quot;, &quot;category&quot;: &quot;NetworkSecurityGroupFlowEvent&quot;, &quot;resourceId&quot;: &quot;/SUBSCRIPTIONS/00000000-0000-0000-0000-000000000000/RESOURCEGROUPS/FABRIKAMRG/PROVIDERS/MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/FABRIAKMVM1-NSG&quot;, &quot;operationName&quot;: &quot;NetworkSecurityGroupFlowEvents&quot;, &quot;properties&quot;: { &quot;Version&quot;: 2, &quot;flows&quot;: [ { &quot;rule&quot;: &quot;DefaultRule_DenyAllInBound&quot;, &quot;flows&quot;: [ { &quot;mac&quot;: &quot;000D3AF87856&quot;, &quot;flowTuples&quot;: [ &quot;1542110402,94.102.49.190,10.5.16.4,28746,443,U,I,D,B,,,,&quot;, &quot;1542110424,176.119.4.10,10.5.16.4,56509,59336,T,I,D,B,,,,&quot;, &quot;1542110432,167.99.86.8,10.5.16.4,48495,8088,T,I,D,B,,,,&quot; ] } ] }, { &quot;rule&quot;: &quot;DefaultRule_AllowInternetOutBound&quot;, &quot;flows&quot;: [ { &quot;mac&quot;: &quot;000D3AF87856&quot;, &quot;flowTuples&quot;: [ &quot;1542110377,10.5.16.4,13.67.143.118,59831,443,T,O,A,B,,,,&quot;, &quot;1542110379,10.5.16.4,13.67.143.117,59932,443,T,O,A,E,1,66,1,66&quot;, &quot;1542110379,10.5.16.4,13.67.143.115,44931,443,T,O,A,C,30,16978,24,14008&quot;, &quot;1542110406,10.5.16.4,40.71.12.225,59929,443,T,O,A,E,15,8489,12,7054&quot; ] } ] } ] } }, { &quot;time&quot;: &quot;2018-11-13T12:01:35.3918317Z&quot;, &quot;systemId&quot;: &quot;a0fca5ce-022c-47b1-9735-89943b42f2fa&quot;, &quot;category&quot;: &quot;NetworkSecurityGroupFlowEvent&quot;, &quot;resourceId&quot;: &quot;/SUBSCRIPTIONS/00000000-0000-0000-0000-000000000000/RESOURCEGROUPS/FABRIKAMRG/PROVIDERS/MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/FABRIAKMVM1-NSG&quot;, &quot;operationName&quot;: &quot;NetworkSecurityGroupFlowEvents&quot;, &quot;properties&quot;: { &quot;Version&quot;: 2, &quot;flows&quot;: [ { &quot;rule&quot;: &quot;DefaultRule_DenyAllInBound&quot;, &quot;flows&quot;: [ { &quot;mac&quot;: &quot;000D3AF87856&quot;, &quot;flowTuples&quot;: [ &quot;1542110437,125.64.94.197,10.5.16.4,59752,18264,T,I,D,B,,,,&quot;, &quot;1542110475,80.211.72.221,10.5.16.4,37433,8088,T,I,D,B,,,,&quot;, &quot;1542110487,46.101.199.124,10.5.16.4,60577,8088,T,I,D,B,,,,&quot;, &quot;1542110490,176.119.4.30,10.5.16.4,57067,52801,T,I,D,B,,,,&quot; ] } ] } ] } }  "},{"title":"Flow Tuples​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#flow-tuples","content":"flowTuples: String that contains multiple properties for the flow tuple in a comma-separated format Example entry: 1493695838,185.170.185.105,10.2.0.4,35370,23,T,I,A,C,1021,588096,8005,4610880  "},{"title":"Script to read the logs via PowerShell​","type":1,"pageTitle":"Network Security Groups","url":"/docs/Azure/Networking/Network Security Groups#script-to-read-the-logs-via-powershell","content":"Dump the below into a file as a script (.ps1) filetype. To use the script below, navigate to the location of the file, and use the NsgFlowLogFileName switch to select the JSON file. cd C:\\Temp\\ .\\Parse-NSG-FlowLog_json.ps1 -NsgFlowLogFileName .\\PT1H.json | ft -AutoSize  info I didn't write this script, I cannot take any credit for it! param( [string]$NsgFlowLogFileName = &quot;C:\\Temp\\filename.json&quot; ) # Import the logs from the file convert it from json into a powershell object $logs = gc $NsgFlowLogFileName -ErrorAction SilentlyContinue | ConvertFrom-Json | select -ExpandProperty records # Loop through each entry in the json file foreach ($Log in $Logs) { #Get a list of flows $Flows = $log.properties.flows # Loop through each flow of each json entry and output the details foreach ($Flow in $Flows) { # Split the flow information to a variable for easier and quicker referencing $FlowInfo = $Flow.flows.flowtuples[0] -split(',') # Output details as a powershell object [pscustomobject]@{ DateTime = (Get-Date 01.01.1970)+([System.TimeSpan]::fromseconds($FlowInfo[0])) NSGName = $Log.resourceId.split('/')[-1] RuleName = $Flow.ruleDecision = switch ($FlowInfo[7]) { 'a' { &quot;Allowed&quot; } ; &quot;d&quot; {&quot;Denied&quot;} } FlowState = switch ($FlowInfo[8]) { 'B' { &quot;Begin&quot; } ; &quot;C&quot; {&quot;Continue&quot;} ; &quot;e&quot; {&quot;End&quot;} } SourceIP = $FlowInfo[1] SourcePort = $FlowInfo[3] DestIP = $FlowInfo[2] DestPort = $FlowInfo[4] Protocol = switch ($FlowInfo[5]) { 't' { &quot;TCP&quot; } ; &quot;u&quot; {&quot;UDP&quot;} } Direction = switch ($FlowInfo[6]) { 'i' { &quot;InBound&quot; } ; &quot;o&quot; {&quot;OutBound&quot;} } SourcePackets = $FlowInfo[9] SourceBytes = $FlowInfo[10] DestPackets = $FlowInfo[11] DestBytes = $FlowInfo[12] # Below line ends the flow loop, then filters out the empty entries. } | where SourceIP -ne $null } }  Created: 2023-10-14, Updated: 2023-10-14 "},{"title":"Code-Snippets","type":0,"sectionRef":"#","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Script Template​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#script-template","content":" Script Template. &lt;# Internal documentation fields. Script Title: [Title of your script] Description: [Brief description of the script's purpose] Author: [Your name or organization] Date: [Date of script creation or last modification] #&gt; &lt;# Parameters that show up in command line using `-help`. .SYNOPSIS Retrieves user information from Active Directory. .PARAMETER Username Specifies the username of the user to retrieve. .OUTPUTS System.Management.Automation.PSObject .EXAMPLE Get-User -Username &quot;jdoe&quot; #&gt; # Script Parameters param ( # [Parameter 1 Description] [Parameter(Mandatory = $true)] [string]$Parameter1, # [Parameter 2 Description] [Parameter(Mandatory = $false)] [int]$Parameter2 = 10 ) # Script Initialization Write-Host &quot;Initializing the script...&quot; try { # Main Script Logic Write-Host &quot;Executing the main logic of the script...&quot; # Your code goes here... # Example: Outputting parameter values Write-Host &quot;Parameter 1: $Parameter1&quot; Write-Host &quot;Parameter 2: $Parameter2&quot; # End of Script Write-Host &quot;Script execution completed.&quot; } catch { # Error Handling Write-Host &quot;An error occurred: $($_.Exception.Message)&quot; # Additional error handling and reporting can be added as needed }  "},{"title":"Collect and Encrypt Credentials​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#collect-and-encrypt-credentials","content":" Get-Credential $credential = Get-Credential $credential.Password | ConvertFrom-SecureString | Set-Content &quot;C:\\temp\\Reporting\\encrypted_password_for_reporting.txt&quot; &lt;# Decrypting it and using it in a script#&gt; # Get the credential $emailusername = &quot;email.address@domain.com&quot; $encrypted = Get-Content &quot;C:\\temp\\encrypted_password_for_reporting.txt&quot; | ConvertTo-SecureString $credential = New-Object System.Management.Automation.PsCredential($emailusername, $encrypted)  "},{"title":"User confirmation statement​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#user-confirmation-statement","content":" Read-Host &lt;# Disclaimer to confirm user is happy to begin the process. #&gt; Write-Host &quot;Write your warning text here.&quot; -ForegroundColor Yellow Start-Sleep 2 $decisionConfirmation = Read-Host &quot;Are you sure you wish to proceed. Type Y to begin or N to stop here [y/n].&quot; if ($decisionConfirmation -ne 'y') { &lt;# Action if statement is true. #&gt; Write-Host &quot;The script will not proceed any further.&quot; -ForegroundColor Red WriteToLogFile &quot;$(Get-Date) - User selected to not proceed with the script, terminating.&quot; # 'Script terminated.' }  "},{"title":"Log file function​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#log-file-function","content":" The below is a small function that creates the log file and a new command WriteToLogFile, which will add the content to the log file. $date = Get-Date -Format dd-mm-yyyy $logFileLocation = &quot;C:\\Temp\\&quot; &lt;# Create the log file. #&gt; try { &lt;# Try the following. #&gt; function WriteToLogFile ($message) { Add-Content $logFileLocation\\LogFile_$date.log -Value $message } if (Test-Path $logFileLocation\\LogFile_$date.log) { Write-Host 'Log file already exists, deleting and re-creating.' Start-Sleep 2 Remove-Item $logFileLocation\\LogFile_$date.log } WriteToLogFile &quot;$(Get-Date) - Log File created.&quot; } catch { &lt;# Collect and report any errors. #&gt; Write-Host &quot;Failed to create log file at the following location:&quot;$logFileLocation -ForegroundColor Red&quot;, continuing without logging.&quot; Write-Host $_ -ForegroundColor Red WriteToLogFile &quot;$(Get-Date) - $($_)&quot; throw 'Script terminated.' }  "},{"title":"Folder Size Report​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#folder-size-report","content":" ########################## Basic File report for the directory you're currently in. ########################## Get-ChildItem | Select FullName,@{l='Size(GB)';e={ [math]::round($_.length/1024,2) } }, CreationTime, LastAccessTime, LastWriteTime ########################## Folder size. ########################## # /1MB - Convert to MB. # /1GB - Convert to GB (gci -path &quot;Folder Path&quot; -Recurse | measure -Property Length -Sum).sum /1MB # Round to 2 decimal places. [Math]::round((gci .\\Networking\\ -Recurse | measure -Property Length -Sum).sum /1MB,2)  "},{"title":"Time stamped ping​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#time-stamped-ping","content":" Test-NetConnection &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Time Stamped Ping test Test-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\SystemDiagnosticCollection\\PingtoGoogle-IP.txt Write-host 'Network Tests ran successfully' # Add this if you're writing a script where you need to update the PowerShell prompt.  "},{"title":"Collecting Event Logs​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#collecting-event-logs","content":" Get-EventLog &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Collect System Logs Get-Eventlog -LogName System -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\System_Logs.csv -notype # Collect Application Logs Get-Eventlog -LogName Application -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\Application_Logs.csv -notype Write-host 'Successfully gathered Event Logs'  "},{"title":"Collect Printer information​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#collect-printer-information","content":" Get-printer &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Collect printer information Get-printer | Out-File -FilePath C:\\SystemDiagnosticCollection\\Printer-Info.txt Write-host 'Gathered Printer info' # Add this if you're writing a script where you need to update the PowerShell prompt.  "},{"title":"Collect the 'key' info from dsregcmd command​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#collect-the-key-info-from-dsregcmd-command","content":" dsregcmd /status  New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory Write-host 'Folder created at C:\\SystemDiagnosticCollection' #not finished yet, it'll print out only. Write-host 'Basic AAD Info' dsregcmd /status | select-string -Pattern 'Device Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'AzureADJoined' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'DeviceId' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'TenantName' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt write-host 'Single Sign on Info' dsregcmd /status | select-string -Pattern 'AzureAdPrt' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt dsregcmd /status | select-string -Pattern 'AzureAdPrtUpdateTime' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt dsregcmd /status | select-string -Pattern 'RefreshPrtDiagnostics' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt Write-host 'System Information' systeminfo | Select-String -Pattern 'OS Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'OS Version' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Original Install Date' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'System Boot Time' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Time Zone' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Total Physical Memory' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt  "},{"title":"Get Open files​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#get-open-files","content":" Get-SMBopenFile Get-SMBopenFile # All sessions listed. Get-SmbOpenFile -FileId &quot;file ID&quot; | select -Property * # Lists all properties for a particular file ID, for file ID run the command above. # Example of querying live. Get-SmbOpenFile | Select clientcomputername, sessionid, clientusername, path | sort clientusername, path | ft -a # Retrieve active open files. Get-SmbOpenFile | where clientusername -like '*Name*' | Select clientcomputername, sessionid, clientusername,path | sort clientusername, path | ft -a # Search and sort example. # Example usage with variable. $smbOpenFiles = Get-SmbOpenFile | select -Property * # Get all open files information and store in variable. $smbOpenFiles | Select clientcomputername, sessionid,clientusername,path | sort clientusername,path | ft -a # Example of sorting the input.  "},{"title":"Uninstall App using Uninstall String​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#uninstall-app-using-uninstall-string","content":" Get-ItemProperty $regKeyPaths = @( 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall' 'HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall' ) $regItems = Get-ChildItem -Path $regKeyPaths | Get-ItemProperty | where displayname -Like '*searchterm*' | Select-Object DisplayName, Uninstallstring foreach ($string in $regitems) { $uninstallString = $string.Uninstallstring.replace('MsiExec.exe','').replace('/I','/x ').replace('{','').replace('}','') Start-Process C:\\Windows\\System32\\msiexec.exe -ArgumentList $uninstallString -wait -Verbose } Start-Process C:\\Windows\\System32\\msiexec.exe -ArgumentList $uninstallStrings[0] -wait Start-Process C:\\Windows\\System32\\msiexec.exe -ArgumentList $uninstallStrings[1] -wait  "},{"title":"PSSendGrid Module Example​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#pssendgrid-module-example","content":" Send-PSSendGridMail $sendGridToken = &quot;SG.apikey&quot; $attachmentPath = $reportFile # File path to the attachment\\data. $attachmentDisposition = &quot;attachment&quot; # Value can either be &quot;attachment&quot; or &quot;inline&quot;, inlines is for images, check the command help examples for info. $emailBody = @( &quot;Ener text here, the '`n' adds a carrige return `n&quot; ) -join &quot; &quot; try { # Basic email with just content. $Parameters = @{ FromAddress = &quot;fromaddress@domain.com&quot; ToAddress = &quot;AddressOne@domain.com&quot;, &quot;AddressTwo@domain.com&quot; Subject = &quot;Subject text&quot; Body = $emailBody AttachmentPath = $attachmentPath AttachmentDisposition = $attachmentDisposition Token = $sendGridToken FromName = &quot;Name to show who from.&quot; ToName = &quot;test&quot; } } catch { $_ } Send-PSSendGridMail @Parameters  "},{"title":"Assign Permissions to Managed Identity​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#assign-permissions-to-managed-identity","content":" # Your tenant id. $TenantID=&quot;&quot; # Microsoft Graph App ID (DON'T CHANGE). $GraphAppId = &quot;00000003-0000-0000-c000-000000000000&quot; # Name of the manage identity (same as the Logic App name). $DisplayNameOfMSI=&quot;&quot; # Check the Microsoft Graph documentation for the permission you need for the operation. $PermissionName = &quot;User.Read.All&quot; # Install the module (You need admin on the machine) Install-Module AzureAD -Scope CurrentUser # Connect to Azure AD via tenant ID, you'll need an admin account to login with though. Connect-AzureAD -TenantId $TenantID # Collects the Target System Managed Identities information into the MSI variable. $MSI = (Get-AzureADServicePrincipal -Filter &quot;displayName eq '$DisplayNameOfMSI'&quot;) Start-Sleep -Seconds 10 # Store the Microsoft Graph API informaiton into the GraphServicePrincipal variable. $GraphServicePrincipal = Get-AzureADServicePrincipal -Filter &quot;appId eq '$GraphAppId'&quot; # Searches Microsoft Graph API for the value matching the PermissionName variable populated above and stores this in the AppRole Variable. $AppRole = $GraphServicePrincipal.AppRoles | Where-Object {$_.Value -eq $PermissionName -and $_.AllowedMemberTypes -contains &quot;Application&quot;} # Assigned the permission from the Microsoft Graph API to the target Managed Identity. New-AzureADServiceAppRoleAssignment -ObjectId $MSI.ObjectId -ResourceId $GraphServicePrincipal.ObjectId -Id $appRole.Id -PrincipalId $MSI.ObjectId  "},{"title":"Get FISMO roles​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#get-fismo-roles","content":" Get-ADForest $properties = @( 'SchemaMaster', 'DomainNamingMaster', @{ n='pdcemulator';e={ Get-ADDomain | Select -ExpandProperty pdcemulator} }, @{ n='ridmaster';e={ Get-ADDomain | Select -ExpandProperty ridmaster} }, @{ n='infrastructuremaster';e={ Get-ADDomain | Select -ExpandProperty infrastructuremaster} } ) Get-ADForest | Select $properties | Format-List  "},{"title":"Adding output from two sources in the PipeLine​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#adding-output-from-two-sources-in-the-pipeline","content":" $source1 = # Some sort of input source. $source2 = # Secondary input source. # Take source1 variable &amp; add a property to the output from source2. # You may need to include 'Select -ExpandProperty attributeName' if you get brackets or other special characters in your final output. $source1 | Select *, @{ l='itemName';e={$source2 | where mostrecentuser -Match $_.attributeName}}, * -ExcludeProperty attributeName  "},{"title":"Direct Send​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#direct-send","content":" Send-MailMessage # Get the credential $credential = Get-Credential ## Define the Send-MailMessage parameters $mailParams = @{ SmtpServer = 'smtp.office365.com' Port = '587' # or '25' if not using TLS UseSSL = $true ## or not if using non-TLS Credential = $credential From = 'Email.Address@domain.com' To = 'Email.Address@domain.com'# , 'recipient@NotYourDomain.com' Subject = &quot;SMTP Client Submission - $(Get-Date -Format g)&quot; Body = 'This is a test email using SMTP Client Submission' Attachment = &quot;$env:USERPROFILE\\Desktop\\File.csv&quot; DeliveryNotificationOption = 'OnFailure', 'OnSuccess' } ## Send the message Send-MailMessage @mailParams  "},{"title":"Find Microsoft Graph Permissions Scopes​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#find-microsoft-graph-permissions-scopes","content":" Find-MgGraphCommand Find-MgGraphCommand -command Get-MgUser | Select -First 1 -ExpandProperty Permissions  "},{"title":"Microsoft Graph Connection Scopes​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#microsoft-graph-connection-scopes","content":" Connect-MGGraph $mggraphScopes = @( &quot;User.Read.All&quot;, &quot;Group.Read.All&quot;, &quot;DeviceManagementRBAC.Read.All&quot;, &quot;DeviceManagementServiceConfig.Read.All&quot;, &quot;DeviceManagementConfiguration.Read.All&quot;, &quot;DeviceManagementManagedDevices.Read.All&quot;, &quot;DeviceManagementApps.Read.All&quot;, &quot;Policy.Read.All&quot; ) Connect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID  "},{"title":"Azure AD User Password Reset Report​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#azure-ad-user-password-reset-report","content":" Get-MGUser $properties = @( 'UserPrincipalName', 'DisplayName', 'LastPasswordChangeDateTime', 'PasswordPolicies', @{l='PasswordAgeDays';e={ (New-TimeSpan -Start $_.LastPasswordChangeDateTime -End (get-date) )TotalDays -as [int] }} ) Get-MgUser -All -Property UserPrincipalName, DisplayName, Id, LastPasswordChangeDateTime,PasswordPolicies | Select-Object $properties | Sort-Object PasswordAgeDays  "},{"title":"Get Intune Device Report with Primary User​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#get-intune-device-report-with-primary-user","content":" Get-MGDeviceManagementManagedDevice $mggraphScopes = @( &quot;User.Read.All&quot;, &quot;Group.Read.All&quot;, &quot;DeviceManagementRBAC.Read.All&quot;, &quot;DeviceManagementServiceConfig.Read.All&quot;, &quot;DeviceManagementConfiguration.Read.All&quot;, &quot;DeviceManagementManagedDevices.Read.All&quot;, &quot;DeviceManagementApps.Read.All&quot;, &quot;Policy.Read.All&quot; ) Connect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID $properties = @( 'DeviceName', 'UserPrincipalName', 'EnrolledDateTime', 'ComplianceState', 'IsEncrypted', 'LastSyncDateTime', 'Id', 'Manufacturer', 'Model', 'OperatingSystem', 'OSVersion', 'SerialNumber', @{l='PrimaryUser';e={$device = $_;Get-MgDeviceManagementManagedDeviceUser -ManagedDeviceId $device.id | select -expandproperty UserPrincipalName}} ) $getAllDevices = Get-MgDeviceManagementManagedDevice -All | Select-Object $properties | Sort OperatingSystem  "},{"title":"List Intune Configuration Profiles​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#list-intune-configuration-profiles","content":" Get-MgDeviceManagementDeviceConfiguration $mggraphScopes = @( &quot;User.Read.All&quot;, &quot;Group.Read.All&quot;, &quot;DeviceManagementRBAC.Read.All&quot;, &quot;DeviceManagementServiceConfig.Read.All&quot;, &quot;DeviceManagementConfiguration.Read.All&quot;, &quot;DeviceManagementManagedDevices.Read.All&quot;, &quot;DeviceManagementApps.Read.All&quot;, &quot;Policy.Read.All&quot; ) Connect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID # Get Configuration Profiles for an Org. Get-MgDeviceManagementDeviceConfiguration -All | select Id, DisplayName  "},{"title":"List Intune Compliance Policies​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#list-intune-compliance-policies","content":" Get-MgDeviceManagementDeviceCompliancePolicy $mggraphScopes = @( &quot;User.Read.All&quot;, &quot;Group.Read.All&quot;, &quot;DeviceManagementRBAC.Read.All&quot;, &quot;DeviceManagementServiceConfig.Read.All&quot;, &quot;DeviceManagementConfiguration.Read.All&quot;, &quot;DeviceManagementManagedDevices.Read.All&quot;, &quot;DeviceManagementApps.Read.All&quot;, &quot;Policy.Read.All&quot; ) Connect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID # Get Compliance policies for an Org. Get-MgDeviceManagementDeviceCompliancePolicy -All | Select Displayname,LastModifiedDateTime, Id  "},{"title":"List Compliance Policies for a single device​","type":1,"pageTitle":"Code-Snippets","url":"/docs/PowerShell/PowerShell-cheatsheet/Code-Snippets#list-compliance-policies-for-a-single-device","content":"Get-MgDeviceManagementManagedDeviceCompliancePolicyState # Device Compliancy for a single device. Get-MgDeviceManagementManagedDeviceCompliancePolicyState -ManagedDeviceId  "}]