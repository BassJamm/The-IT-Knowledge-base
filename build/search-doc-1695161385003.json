[{"title":"Microsoft Defender for Endpoint Woes","type":0,"sectionRef":"#","url":"/blog/Defender-for-Endpoint-Woes","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"The Investigation​","type":1,"pageTitle":"Microsoft Defender for Endpoint Woes","url":"/blog/Defender-for-Endpoint-Woes#the-investigation","content":"From checking the alert, I could see the service was stopping and starting but, no real reason as to why it was doing this. This is when I turned to PowerShell (still unsure of why I did this over trusty Event Viewer, just seems to be my default now). Quickly smashed out the below command to see what I could find. This promptly spat out these errors. After googling this (as any techy would), there are a lot of mentions of this error message all over the place with suggestions to do the following:- Disable or uninstall any other AV products on the device. Run a Full system scan for viruses. Run a System File Checker scan from the command line, sfc /scannow. Re-install the Defender for Endpoint on that device. Update the OS to a new version (A bit extreme mind you however, new OS versions have much better support for Defender, you don't need this service on Server 2016 and above, so it's still valid!) "},{"title":"What Solved It​","type":1,"pageTitle":"Microsoft Defender for Endpoint Woes","url":"/blog/Defender-for-Endpoint-Woes#what-solved-it","content":"The short answer is, I'm not 100% certain. Our first port of call was to remove the System Center Endpoint Protection application, which we probably should have done before installing the Defender for Endpoint application to be honest. Secondly, we off-boarded the appliance from Defedner and then on-boarded it again by doing the following: - Download the off-boarding script from your Defender portal. In the navigation pane, select Settings &gt; Endpoints &gt; Device management &gt; Offboarding. Off-Board the Server using the script provided by Microsoft below. C:\\Packages\\Plugins\\Microsoft.Azure.AzureDefenderForServers.MDE.Windows\\versionNo\\Install.ps1. The command is, Install.ps1 -OffboardingScript .\\WindowsDefenderATPOffboardingScript_valid_until_*.cmd Reboot the server. Check the Defender application is gone from Programs and Features and that the Services are gone. If not, manually uninstall using Programs and Features. On-Board the server again using the script provided by Microsoft. Command below. C:\\Packages\\Plugins\\Microsoft.Azure.AzureDefenderForServers.MDE.Windows\\versionNo\\Install.ps1. The command is, .\\Install.ps1 -OnboardingScript .\\WindowsDefenderATPOnboardingScript_valid_until_*.cmd Reboot the server. Hopefully this helps somone! "},{"title":"Welcome!","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Welcome to the blog. This blog is created with Docusaurus 2. Quick Social Plug Check out my other post locations: - HashNode Link","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Welcome to the Wiki","type":0,"sectionRef":"#","url":"/docs/","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Navigating the Wiki​","type":1,"pageTitle":"Welcome to the Wiki","url":"/docs/#navigating-the-wiki","content":"Navigate using the navbar on the left hand side. Search the site. There is a search bar in the top right, try searching keywords for what you're after. "},{"title":"How the site works​","type":1,"pageTitle":"Welcome to the Wiki","url":"/docs/#how-the-site-works","content":"The website is stored within a GitHub Repo, this is then copied over to a Static Web App hosted in Azure using a GitHub action.The site is generated using Docusaurus, big shout to them for making this incredible beast! "},{"title":"Challenge 2 - Folder Size Report with PowerShell","type":0,"sectionRef":"#","url":"/blog/pwsh-challenge-002","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"End Result​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#end-result","content":"Thought I would put the result first, and save people from scrolling, those who wish to see the process can read the rest of this! I decided not to add any error handling into this, as it's quite hard to break this one! note Sorry for the backticks, it makes it a bit easier to read on the page as it's quite slim! Link to script in GitHub! ###### Prompt user for flder input. ###### $sourceDirectory = Read-Host -Prompt &quot;Please enter the directory you wish to scan&quot; ###### Get all Directories in that location. ###### Write-Host &quot;Collecting the diretory information.&quot; -ForegroundColor Yellow $ChildDirectories = (Get-ChildItem $sourceDirectory -Directory).FullName Start-Sleep 1 Write-Host &quot;Directories found successfully.&quot; -ForegroundColor Green ###### Foreach directory get all items recursively. ###### Write-Host &quot;Processing items.&quot; -ForegroundColor Yellow $childDirectorySizes = foreach ($folder in $ChildDirectories) { [PSCustomObject]@{ &quot;Location&quot; = $folder &quot;FileItems&quot; = (Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object | Select-Object Count).Count &quot;Size(MB)&quot; = [Math]::Round((Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object -Property Length -Sum | Select-Object Sum).Sum / 1MB, 3) } } Write-Host &quot;All subdirectories processed successfully.&quot; -ForegroundColor Green ###### Provide a size report of the directory and child directories. ###### $childDirectorySizes | Format-Table * -AutoSize  "},{"title":"Building the script​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#building-the-script","content":"I would like to start by saying I am not an expert at this but, these challenges prompt learning and thus I aim to be better for the next challenge and so on. "},{"title":"Prompting for user input​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#prompting-for-user-input","content":"Firstly, we need to get the folder location from the end user. I've done this using the Read-Host command with the -prompt parameter. This is a staple command I have found in almost every script requiring user input. $sourceDirectory = Read-Host -Prompt &quot;Please enter the directory you wish to scan&quot;  The Read-Host -prompt input is then stored in the `$sourceDirectory`` variable for later use. "},{"title":"Getting the Folders​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#getting-the-folders","content":"Secondly, we need to identify the folders that are within the directory the user gave us. We are doing this with the Get-ChildItem command, which gets everything in that location, Folders, or Files. I'm then piping this | into a Where-Object command which then identifies the Folders or containers. info I've added a sort by &quot;name&quot; at the end, as I want to display the first 10 items in the console, to indicate that the script has found items to the end user. It is completely unnecessary! ###### Prompt user for flder input. ###### $sourceDirectory = Read-Host -Prompt &quot;Please enter the directory you wish to scan&quot;  We then get all of hte directories in the folder location promtped for using the lin above. ###### Get all Directories in that location. ###### $ChildDirectories = (Get-ChildItem $sourceDirectory -Directory).FullName Start-Sleep 1 # Add this for slightly better pacing when using the script.  "},{"title":"Getting the Folder Sizes​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#getting-the-folder-sizes","content":"Thirdly, we need to get the folder sizes and convert them into a nicer format to read, quite a bit to unpack on this one, so please bear with my explanation; you may also want to blow this image up, it's a little small, sorry! ###### Foreach directory get all items recursively. ###### Write-Host &quot;Processing items.&quot; -ForegroundColor Yellow $childDirectorySizes = foreach ($folder in $ChildDirectories) { [PSCustomObject]@{ &quot;Location&quot; = $folder &quot;FileItems&quot; = (Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object | Select-Object Count).Count &quot;Size(MB)&quot; = [Math]::Round((Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object -Property Length -Sum | Select-Object Sum).Sum / 1MB, 3) } }  I've created a new variable called, $childDirectorySizes in this variable, we are going to store the output of the foreach loop. The foreach the argument takes each folder entry found within the $ChildDirectories &amp; then loops through the script inside the squiggly brackets. foreach ($folder in $ChildDirectories)  The foreach loop does the following: - Grabs the full file paths for each file recursively using Get-ChildItem $folder.FullName -recurse -force.Then it searches for any objects that are not a Folder using Where-Object {$_.PSIsContainer -eq $false}.It then measures the object using Measure-Object -property Length -sum.We then select only the one property that we want, Select-Object Sum.It then stores results inside the variable $subFolderItems.We then create a new PowerShell object using the command, [PSCustomObject], as this is going to be a new Hash table, we add the @{} after it, all properties go inside the squiggly brackets.We then create 2 new properties, Location and Size(MB). For each of these properties, we need to tell it where the information comes from and how to format it. For Location, we are going to use the Items Full name, which is equal to its full UNC path. $folder.FullName. For Size(MB), we are going to use the Output of steps 1 to 5. The output from this should be the SUM of all the files under the folder item that's stored in the variable $folder which is in the foreach loop argument. We also want to round this to MBs with 2 Decimal places; we can do this with the command, [Math]::Round($subFolderItems.sum /1MB, 2). "},{"title":"Creating a console Ouput​","type":1,"pageTitle":"Challenge 2 - Folder Size Report with PowerShell","url":"/blog/pwsh-challenge-002#creating-a-console-ouput","content":"For this point, I have taken the variable that is holding the output from the Foreach loop noted above and piped this into a Format-Table command with the order of the properties to show. ###### Provide a size report of the directory and child directories. ###### $childDirectorySizes | Format-Table * -AutoSize  Which gives you this. Location FileItems Size(MB) -------- --------- -------- C:\\GitRepos\\100-days-of-javascript 287 59.772 C:\\GitRepos\\PowerShellChallenge 106 0.072 C:\\GitRepos\\Private-Code-Dump 253 14.089 C:\\GitRepos\\python-app 97 0.067 C:\\GitRepos\\The-IT-Knowledge-base 36396 414.871  "},{"title":"Challenge 1 - File Download Script with PowerShell","type":0,"sectionRef":"#","url":"/blog/pwsh-challenge-001","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Creating the script​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#creating-the-script","content":""},{"title":"Basic functionality​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#basic-functionality","content":"Firstly, we'll create the logic outline, by that I mean, create the bare bones of the script without any error handling or console output. note I've seen parameter blocks written in multiple ways, I write them this way as I think they're more easily understood by those who are not familiar with them. &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter(Mandatory=$true)] [string] $Source, [Parameter(Mandatory=$true)] [string] $Destination ) &lt;# Bare bones of the command to download an item. #&gt; Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download  Running the above script file by type .\\TOOL-File-download.ps1 -Source &quot;https://go.microsoft.com/fwlink/p/?LinkID=2195167&amp;clcid=0x409&amp;culture=en-us&amp;country=US&quot; -Destination C:\\Temp\\Server2019.iso does the job; the output is below. Now to add the ability to see running jobs and historic jobs. "},{"title":"Adding running and historic job reports​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#adding-running-and-historic-job-reports","content":"As you can see below, this is becoming a bit longer but, I would not say it is getting any more complex.  &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [switch] $JobReport, [Parameter()] [switch] $JobHistory ) ###### Add the ability to review in-progress download job(s). ###### if ($JobReport) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting running downloads.&quot; Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } ###### Add the ability to review historic job(s). ###### if ($JobHistory) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting historic downloads.&quot; Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize }  Now to add a way to cancel running jobs. "},{"title":"Canceling jobs​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#canceling-jobs","content":"Below I have added the code to cancel a running job, although a bit basic and rough it does work.  &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [String] $CancelJob ) ###### Add the ability to cancel job(s). ###### if ($CancelJob) { &lt;# Action to perform if the condition is true #&gt; Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize }  "},{"title":"Adding in some error handling and console output​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#adding-in-some-error-handling-and-console-output","content":"Below I have added in some 'fluff', some try\\catch blocks and some write-host functionality to make using this a bit easier. Try\\Catch blocks are a godsend when it comes to error handling, essentially it means try what is in the try area and catch anything that comes out of it. "},{"title":"Downloading the file section​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#downloading-the-file-section","content":"###### Download a file. ###### if ($Source) { &lt;# Action to perform if the condition is true #&gt; try { Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName Write-Host &quot;Beginning download from $($Source).&quot; Write-Host &quot;&quot; # This just adds some more space in the console. } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when starting the job.&quot; $_ } }  "},{"title":"Canceling the download section​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#canceling-the-download-section","content":" ###### Add the ability to cancel job(s). ###### if ($CancelJob) { &lt;# Action to perform if the condition is true #&gt; try { Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer Write-Host &quot;Job cancelled successfully.&quot; -ForegroundColor Green Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 2 Write-Host &quot;Remaining jobs listed below.&quot; -ForegroundColor Yellow Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 1 Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when cancelling job.&quot; $_ } }  "},{"title":"Full Script​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#full-script","content":" &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [string] $Source, [Parameter()] [string] $Destination, [Parameter()] [string] $JobName, [Parameter()] [switch] $RunningJobs, [Parameter()] [switch] $JobHistory, [Parameter()] [String] $CancelJob ) ###### Download a file. ###### if ($Source) { &lt;# Action to perform if the condition is true #&gt; try { Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName Write-Host &quot;Beginning download from $($Source).&quot; Write-Host &quot;&quot; # This just adds some more space in the console. } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when starting the job.&quot; $_ } } ###### Add the ability to review in-progress download job(s). ###### if ($RunningJobs) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting running downloads.&quot; Write-Host &quot;&quot; # This just adds some more space in the console. Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } ###### Add the ability to review historic job(s). ###### if ($JobHistory) { &lt;# Action to perform if the condition is true #&gt; Write-Host &quot;Getting historic downloads.&quot; Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } ###### Add the ability to cancel job(s). ###### if ($CancelJob) { &lt;# Action to perform if the condition is true #&gt; try { Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer Write-Host &quot;Job cancelled successfully.&quot; -ForegroundColor Green Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 2 Write-Host &quot;Remaining jobs listed below.&quot; -ForegroundColor Yellow Write-Host &quot;&quot; # This just adds some more space in the console. Start-sleep 1 Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when cancelling job.&quot; $_ } }  "},{"title":"Bonus: Multiple downloads​","type":1,"pageTitle":"Challenge 1 - File Download Script with PowerShell","url":"/blog/pwsh-challenge-001#bonus-multiple-downloads","content":"The Start-BitsTransfer command supports pipeline input, so you can add multiple download links using a text file. Create a text file in the format below, this is a typical csv format. ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1690560380176/0d5d0ab7-5b77-4010-9ed7-e30d780a510a.png align=&quot;center&quot;) Additional Code was added to the script.  &lt;# Parameter List #&gt; [CmdletBinding()] param ( [Parameter()] [string] $MultiJobDownload ) ###### Download multiple files. ###### if ($MultiJobDownload) { &lt;# Action to perform if the condition is true #&gt; try { Import-csv -Path $MultiJobDownload | Start-BitsTransfer -Asynchronous Write-Host &quot;Beginning download from listed sources.&quot; Write-Host &quot;&quot; # This just adds some more space in the console. Start-Sleep 1 Write-Host &quot; Sources and destinations below: -&quot; Get-Content -Path $MultiJobDownload } catch { &lt;#Do this if a terminating exception happens#&gt; Write-Host &quot;Error when starting the job.&quot; $_ } }  "},{"title":"Decom an Azure AD App","type":0,"sectionRef":"#","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Prerequisites​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#prerequisites","content":"Must be an owner of the application or have admin privileges. "},{"title":"Locate the App​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#locate-the-app","content":"Sign in to the Azure portal.Search and select the Azure Active Directory app.Under Manage, select App registrations and select the application(Desktop Portal) that you want to configure. "},{"title":"Confirm the App is not longer used​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#confirm-the-app-is-not-longer-used","content":"Prevent access via the app to determine it is not being used, change the following Application settings using the Azure AD portal. Overview Page Enabled for users to sign-in? - Set this setting to NO. With this off, the application cannot be used. Users and Groups Page Remove all groups\\users (Screenshot them incase they need to be re-added). Permissions Page Remove all Admin and User consented permissions (Screenshot them incase they need to be re-added). "},{"title":"Delete the App from Azure AD​","type":1,"pageTitle":"Decom an Azure AD App","url":"/docs/Azure-Active-Directory/App-Registrations/Decom an Azure AD App#delete-the-app-from-azure-ad","content":"From the Overview page, select Delete.Read the deletion consequences. Check the box if one appears at the bottom of the pane.Select Delete to confirm that you want to delete the app. "},{"title":"Setup Azure Backup","type":0,"sectionRef":"#","url":"/docs/Azure/Azure-Backup/Setup Azure Backup","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Setup Azure Backup","url":"/docs/Azure/Azure-Backup/Setup Azure Backup#document-control","content":"Created: xLast Updated: 23/04/22 This document will run through a very basic Azure Backup setup scenario. caution This document is for setting backup policeis for Virutal Machines only. If you need to backup other resources, got to section 1.2, step 4 and select a differnet resource. "},{"title":"Create the below resources​","type":1,"pageTitle":"Setup Azure Backup","url":"/docs/Azure/Azure-Backup/Setup Azure Backup#create-the-below-resources","content":"info Use whatever naming conention fits in with what's being used already, I am just suggesting something here. Create the resource group, for example, rg-&lt;customername&gt;-&lt;region&gt;-&lt;prod/dev&gt;-backups-01.Create a recovery services vault to store the backups (GRS is the preferred option, LRS for lowest cost), for example, rsv-&lt;customername&gt;-&lt;region&gt;-&lt;prod/dev&gt;-backup-01.Create a log analytics workspace or reuse another one, for example, la-&lt;customername&gt;-&lt;region&gt;-&lt;prod/dev&gt;-backup-01. "},{"title":"Configure Backup Policy​","type":1,"pageTitle":"Setup Azure Backup","url":"/docs/Azure/Azure-Backup/Setup Azure Backup#configure-backup-policy","content":"Configure the backup policy in-line with whatever standard is being used already, my suggestions are below. In the Azure portal, select a Recovery Services vault to back up the VM.Under Backup, select Backup Policies.Click +Add.On Select policy type, select Azure Virtual Machine.On Create policy, perform the following actions: Policy sub type: StandardSuggested Name format: Bkup-policy-&lt;time of day&gt;-&lt;policy type&gt; (example name: bkup-policy-nightly-std).  "},{"title":"Configure Alerting​","type":1,"pageTitle":"Setup Azure Backup","url":"/docs/Azure/Azure-Backup/Setup Azure Backup#configure-alerting","content":"tip Note that this method is using the old backup alerting method, this is being replaced by Azure Monitor. Microsoft Link for more information Configure diagnostic logs to be sent from Azure Backup to the Log Anlytics workspace above. From the Recovery services vault just setup.Click on Backup Alerts, under the Monitoring section.Click Configure Notifications. Enable Notifications: YesRecipients(Email): monitoring@DomainName.comNotify: Hourly digestSeverity: Critical &amp; Warning Example of this below. "},{"title":"Configure Diagnostic log collection​","type":1,"pageTitle":"Setup Azure Backup","url":"/docs/Azure/Azure-Backup/Setup Azure Backup#configure-diagnostic-log-collection","content":"Configure diagnostic logs to be sent from Azure Backup to the Log Anlytics workspace above. Navigate to Diagnostic settings under Monitoring.Click Add Diagnostic Settings.Name your diagnostic setting, something informational, for example, &quot;AzBkup-Diagnostics&quot;, suggestion, Backup Report Data.Select Send to Log Analytics Workspace.Add a workspace and don't touch any other settings.Hit Save. tip Make sure to run the initial backup job from the Azure Backup Dashboard. "},{"title":"Restore data from a Snapshot","type":0,"sectionRef":"#","url":"/docs/Azure/Disks/Restore data from a Snapshot","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#document-control","content":"Created: xLast Updated: 23/04/22 info This doc is for file level restores, this differs from a VM level restore. "},{"title":"Create a new disk from a Snapshot​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#create-a-new-disk-from-a-snapshot","content":"Validate the Snapshot Make sure to check the SnapShot is valid before starting this process. I'm assuming that there's already a Snapshot ready to go. Open the Azure portal, https://portal.azure.com.Navigate to a VM that is available to have a disk attached to it.Click on Disks on the left-hand side.Create a new disk.Click Edit on the far right hand side. As shown in red above.Name your Disk, I'd suggest, snapshot_ServerName_Date_TimeSource, Select snapshot.Select the Snapshot you wish to attach.Make any changes to the Encryption Type.I'd suggest it not to be a shared disk.Press Save. This shouldn't take too long. "},{"title":"Error \"Host Caching is disabled...\"​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#error-host-caching-is-disabled","content":"If you see the error below, change the Host Caching option to &quot;none&quot;.  "},{"title":"Confirm disk is visibile in the OS​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#confirm-disk-is-visibile-in-the-os","content":"tip The share should be available from the get go however, you may need to bring the disk online within computer management. RDP into your VM &amp; check File Explorer for your disk, the name will be what the share was called originally.Open Computer Management, Click Disk Management.Right-Click on the disk, mark it as Oneline. You should now see it in File Explorer. "},{"title":"Detach the disk​","type":1,"pageTitle":"Restore data from a Snapshot","url":"/docs/Azure/Disks/Restore data from a Snapshot#detach-the-disk","content":""},{"title":"Git Cheatsheet","type":0,"sectionRef":"#","url":"/docs/PowerShell/Git/Git Cheatsheet","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#document-control","content":"Created: 23/05/06Last Updated: 23/05/06 "},{"title":"Repo Status​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#repo-status","content":"# make sure to change location to the local git repo folder. # Get git status update, this will tell you the status of commits, if you need to add un-tracked files, or push\\pull updates. git status  "},{"title":"Stage files​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#stage-files","content":"# Add untracked file to git for commit (stage the file). git add 'file name'  "},{"title":"Un-stage files​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#un-stage-files","content":"# To unstage (remove) all files that have not been committed, -f = Force, -d = Directory git reset -f -d  "},{"title":"Commit staged files​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#commit-staged-files","content":"# Commit staged changes to repo. git commit -m &quot;COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT&quot; # Stage all changes and commit with comment, -a = all changes, -m = main branch. git commit -a -m &quot;COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT&quot;  "},{"title":"Push changes to remote Repo​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#push-changes-to-remote-repo","content":" # Push your commited changes to remote repo. Git push  "},{"title":"Un-do recent commit​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#un-do-recent-commit","content":"# To undo the most recent commit - A Git commit should not be reversed if you already pushed it to the remote repository. git reset HEAD~1  "},{"title":"Merge branch into main\\master​","type":1,"pageTitle":"Git Cheatsheet","url":"/docs/PowerShell/Git/Git Cheatsheet#merge-branch-into-mainmaster","content":"# When you are ready to add your changes to the default branch, you merge the feature branch into it git checkout 'default-branch' git merge 'feature-branch'  "},{"title":"Setup Azure Lighthouse","type":0,"sectionRef":"#","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#document-control","content":"Created: xLast Updated: 23/04/22 "},{"title":"Prerequisites and Notes​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#prerequisites-and-notes","content":"caution This document covers creating a template manually and uploading to a customer directly. Not an Azure Marketplace offering. "},{"title":"Online Reading​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#online-reading","content":"Microsoft doc - What is Azure Lighthouse?.Microsoft doc - Onboard a customer to Azure Lighthouse. "},{"title":"Training​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#training","content":"From testing I found that many staff are over-whelmed or confused initially by the customer resources showing in their own managing tenant, consider setting up Lighthouse for your more technical staff first who can train the others.Consider keeping the permissions as simple as possible and only giving access to Lighthouse those who really need it. Subscription Filter. When you add a new customer via Lighthouse, you'll need to amend their subscription filter to show them. I'd highly recommend training staff to use the filter to work with one subscription or customer at a time, save making changes to the wrong client\\customer. "},{"title":"Permissions and Roles​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#permissions-and-roles","content":"Azure Roles. There are over 170 roles in Azure, that's a silly amount of trawl through to find the perfect combination to work with. Consider what you look after for your client\\customer and simplify it as much as possible, limiting access to the staff who really need it may be enough of a security control for you. If you're an MSP there are too many roles to consider, I'd suggest using at the minimum or two groups that assign the Contributor role and the Reader role separately. You can use this segregation to separate those who should look but not touch and those who need to administer and change.PIM elevation works to provide just-in-time access, you can setup an approval process for work.The Managed Services Registration assignment Delete Role, should be assigned so the managing tenant can remove their own Lighthouse delegation without asking the customer to do it.Contributor is the highest role you can assign through Lighthouse. "},{"title":"Azure Lighthouse Deployment​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#azure-lighthouse-deployment","content":"Despite what the documentation says, you can deploy one lighthouse offering to manage multiple subscriptions and resource groups.To have a valid ARM template\\offering you must have one permanently assigned role, such as Reader.Contributor is the highest role you can assign through Lighthouse. (Duplicated I know but, this is important!) "},{"title":"Setup Guidance and Information​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#setup-guidance-and-information","content":""},{"title":"Azure AD​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#azure-ad","content":"Create your groups in Azure AD, these groups will contain the staff members that will access to the customer\\client via Azure Lighthouse. I'd Suggest something like the below, the groups can be as granular as you like and as numerous as you like. Azure Lighthouse Contributor.Azure Lighthouse Reader. Role Assignment to staff business roles. I tried initially to setup groups for our finance team, so they'd be able to manage billing however, this didn't seem to work as I expected and required them to have access to the Azure tenant. We found that Partner Centre solved this issue. "},{"title":"Azure Lighthouse Offering​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#azure-lighthouse-offering","content":"ARM Template​ Below is an outline and suggestion for each relevant configurable options for the ARM template. On-boarding multiple Subscriptions or Resource Groups for one client\\customer. You can delegate multiple resource groups and subscriptions to the same delegation from the Service Providers dashboard\\blade in the customer tenant. The documentation for this may suggest otherwise but, it does work. Offering Name​ This will show in your customer tenant so make sure if reads &quot;nicely&quot;, I'd suggest something like the following. Managing Company Name Lighthouse Offering for Customer Name - Subscription or Resource Group Name. Swap out the relevant information above if you use this naming convention. Description(s)​ This is also customer facing, my suggestion is below. Managing Company Name managed services offer to administer support resources.Managing Company Name offer to work on and administer project resources for project or PO number. Delegation Scope(s)​ You've got two options, Subscription and Resource Group, fairly self explanatory however, you cannot change these after deployment so make sure you select the right one for your needs. Authorizations​ Principal type: GroupName: Select one of the noted groups in section above.Display Name: Do not edit. (Friendly name that shows in customer tenant, will default to the group name)Role: Assign the roles noted against the groups above.Access Type: Permanent. "},{"title":"ARM template Example​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#arm-template-example","content":"You can ignore the top few lines until you find mspOfferName, close to this you'll find your description field. Change the defaultValue: information, not the description: information. Confirming your scope. &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2019-08-01/subscriptionDeploymentTemplate.json#&quot;,, this line should say subscription or resource deployment template, depending on what you selected. Similar situation with the mspOfferDescription: as well.  &quot;mspOfferName&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;metadata&quot;: { &quot;description&quot;: &quot;Specify a unique name for your offer&quot; }, &quot;defaultValue&quot;: &quot;My Company Lighthouse Contributor Offer for Customer Name - Subscription Name &quot; }, &quot;mspOfferDescription&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;metadata&quot;: { &quot;description&quot;: &quot;Name of the Managed Service Provider offering&quot; }, &quot;defaultValue&quot;: &quot;My Company managed services offer to administer support resources.&quot; }  Locate the variables: section to define your group and the Azure role assignments. managedByTenantId&quot; - is your tenant or partner tenant ID.&quot;authorizations&quot;: - Are you Azure Roles assignments.&quot;principalId&quot; - Is your object in the managing tenant.&quot;roleDefinitionId&quot; - Is the Azure AD role you've assigned. In the case below, it's Contributor and the Managed Services Registration assignment Delete roles.&quot;principalIdDisplayName&quot; - Is your friendly Group name, this will show in your customer tenant, it does not need to match the group name in the managing tenant. You'll see some of the information repeated for each role you assign to the same object in the managing tenant. &quot;variables&quot;: { &quot;mspRegistrationName&quot;: &quot;[guid(parameters('mspOfferName'))]&quot;, &quot;mspAssignmentName&quot;: &quot;[guid(parameters('mspOfferName'))]&quot;, &quot;managedByTenantId&quot;: &quot;Your tenant ID&quot;, &quot;authorizations&quot;: [ { &quot;principalId&quot;: &quot;Your object in the managing tenant&quot;, &quot;roleDefinitionId&quot;: &quot;b24988ac-6180-42a0-ab88-20f7382dd24c&quot;, &quot;principalIdDisplayName&quot;: &quot;Lighthouse Contributor&quot; }, { &quot;principalId&quot;: &quot;Your object in the managing tenant&quot;, &quot;roleDefinitionId&quot;: &quot;91c1777a-f3dc-4fae-b103-61d183457e46&quot;, &quot;principalIdDisplayName&quot;: &quot;Lighthouse Contributor&quot; } ] },  You can edit the JSON template directly! You don't need to always duck back into Azure Lighthouse to create the templates, you can just edit the JSON files if you're comfortable doing so. "},{"title":"Using Lighthouse​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#using-lighthouse","content":"tip The methods below are 2 direct methods for accessing customers, you'll be able to see their resources in the portal as if they were your own without having to use the two methods below. "},{"title":"Via the Lighthouse blade​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#via-the-lighthouse-blade","content":"Open the Azure Management Portal.Search for Azure Lighthouse.Click on the Delegations option on the left-hand side, you may need to click manage my customers if you’ve no connections.You will then see your list of your customer’s subscriptions that you have access to. "},{"title":"Via the subscriptions blade​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#via-the-subscriptions-blade","content":"You'll need to show the customer in the subscription filter first though. Open the Azure Management Portal.Navigate to the Subscriptions blade.The list of subscriptions will also list the customer subscriptions you have access too. You won't see the the customer subscriptions straight away! You need to first enable this in the Subscription filter. In the Azure portal, Select the Directory + subscriptions or Settings icon in the top right of the page.In the Directories + subscriptions settings page, ensure that the Advanced filters toggle is turned off.In the Default subscription filter section, select the appropriate directory and subscription. info If you have been granted access to one or more resource groups, rather than to an entire subscription, select the subscription to which that resource group belongs. You'll then work in the context of that subscription, but will only be able to access the designated resource group(s). "},{"title":"Partner Earned Credit (PEC) using PAL​","type":1,"pageTitle":"Setup Azure Lighthouse","url":"/docs/Azure/Azure-Lighthouse/Setup Azure Lighthouse#partner-earned-credit-pec-using-pal","content":"PAL - Partner Admin link PAL is how a partner can be recognized by Microsoft for their work in Azure on-behalf-of their customer. Microsoft doc - Associate your partner ID when you onboard new customers vai Lighthouse.Microsoft doc - Link a PartnerID with PAL or DPOR for PAL To do this via Lighthouse, in a nutshell. Create a service principal user account in your managing tenant.Using that service principal account, link to your Associated Partner ID in your managing tenant.Include at least one authorization which includes the service principal Account as a user with an Azure built-in role that is eligible for PEC. caution This role must be granted as a permanent assignment, not as a just-in-time eligible authorization, in order for PEC to apply. "},{"title":"Create an Automation Account","type":0,"sectionRef":"#","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#document-control","content":"Created: xLast Updated: 23/04/22 "},{"title":"Outline​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#outline","content":"Run As accounts deprecation Run As accounts are being deprecated, managed identities are replacing this. Setup the Resource Group and Automation Account.Setup the Identity for the Automation Account, this is key to running scripts gainst Azure Active Directoy and Office 365 resources. Create ourselves a Runbook, that sits inside the Automation Account. Install the relevant modules for the code we want to run.Write ourselves a little script. Setup a schedule for the Runbook. "},{"title":"Setup the Resource Group and Automation Account.​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#setup-the-resource-group-and-automation-account","content":"Navigate to the Azure portal.Search for Automation Account in the search bar.Select the Automation Account option, Click create in the middle of the screen or Click +Add in the top left.Fill in the necessary information. Resource Group Name (Create one if needs be).Name.Region caution Make sure you Select the same region as the resources you want to query, if the account is to query something else, like Azure AD or Office 365, the region is not so important. Select the Advanced tab and Select the best option for you. System assigned, is attached to the automation account it lives and dies with the automation account resource.User assigned, is one you setup yourself in Azure AD and can be used by multiple resources and is completely seperate to your automation account. Click Review + Create to setup the resource. tip You'll need to assign Azure ADroles and App Permissions to the System or User managed Identity, Microsoft have decided not to make this easy and it needs to be done via command line. "},{"title":"Apply permissions to Managed(System assigned) Identity​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#apply-permissions-to-managedsystem-assigned-identity","content":"You'll need to apply the permissions to the Managed Identity using PowerShell unfortunatly, a Microsoft seem to have decided to make this difficult for us! Reference for where this came fromMicrosoft reference for command. Role names You'll need to find the correct role\\permission name that you want to assign using the script below. Try this Microsoft doc for the Microosft Graph API permissions. "},{"title":"The command​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#the-command","content":"The below is a script you can run but, you can run it line by line to see what is going on if that's more comfortable. The general gist is that you are applying the permissions from the Microsoft Graph App to your Managed Identity. tip This same idea works for any of the Microsoft applications, each serivce has an application that is registered in your tenant. You can apply roles from any of them in theory.  # Your tenant id. $TenantID=&quot;Add your tenant ID&quot; # Microsoft Graph App ID (DON'T CHANGE). $GraphAppId = &quot;00000003-0000-0000-c000-000000000000&quot; # Name of the manage identity (same as the Logic App name). $DisplayNameOfMSI=&quot;Add display name of Enterprise App&quot; # Check the Microsoft Graph documentation for the permission you need for the operation. $PermissionName = &quot;Add your permission here&quot; # Install the module (You need admin on the machine) Install-Module AzureAD # Connect to Azure AD via tenant ID, you'll need an admin account to login with though. Connect-AzureAD -TenantId $TenantID # Collects the Target System Managed Identities information into the MSI variable. $MSI = (Get-AzureADServicePrincipal -Filter &quot;displayName eq '$DisplayNameOfMSI'&quot;) Start-Sleep -Seconds 10 # Store the Microsoft Graph API informaiton into the GraphServicePrincipal variable. $GraphServicePrincipal = Get-AzureADServicePrincipal -Filter &quot;appId eq '$GraphAppId'&quot; # Searches Microsoft Graph API for the value matching the PermissionName variable populated above and stores this in the AppRole Variable. $AppRole = $GraphServicePrincipal.AppRoles | Where-Object {$_.Value -eq $PermissionName -and $_.AllowedMemberTypes -contains &quot;Application&quot;} # Assigned the permission from the Microsoft Graph API to the target Managed Identity. New-AzureADServiceAppRoleAssignment -ObjectId $MSI.ObjectId -ResourceId $GraphServicePrincipal.ObjectId -Id $appRole.Id -PrincipalId $MSI.ObjectId  Annotated the hell out of it as the command really confused me. Heads up! It takes a few minutes for this change to show in the GUI.If the permission already exists the prompt will error on the final command. "},{"title":"Setup Automation Runbook​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#setup-automation-runbook","content":"Sign in to the Azure portal.Search for and Select Automation Accounts.On the Automation Accounts page, Select your Automation account from the list.From the Automation account, Select Runbooks under Process Automation to open the list of runbooks.Click Create a runbook and fill in the information below. Name .Select its type.Select the Runtime versionEnter applicable Description Click Create to create the runbook. "},{"title":"Install any Modules​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#install-any-modules","content":"Sign in to the Azure portal.Search for and Select Automation Accounts.On the Automation Accounts page, Select your Automation account from the list.From the Automation account, Select Modules under Shared Resources. In here you can see a list of currently installed modules and you can add more by Clicking on the +Add a module button. tip You may find that you have to search around a bit for the module that you do actually want and when you do find the module you want, search for the command that you want to use, sometimes the module name is right but the command is missing! Microsoft Graph is probably the most well rounded module but, it's quite finicky to use, otherwise stick with the Az Command line. "},{"title":"Test Script​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#test-script","content":""},{"title":"Create the Script​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#create-the-script","content":"Navigate to your runbook.Click Edit at the top.Here you can enter your script. Useful options on the left hand side to note: CMDLETS, which you can use to find commands from the installed modules.ASSETS, which will show you the various resources available to your runbooks which are saved within your automation account resource. "},{"title":"Test Script​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#test-script-1","content":"Once your done and ready to test. Click on Test pane at the top.Click Start in the top left to being running the scrpt. I found it really hard to get my head around how this works for some reason. So expect that this may take quite a few tries to get right. Storage Account Key Before you can use the script as a base, you'll need to store the storage account key as a variable in your Automation account. Open your Automation Account.Click on Variables under Shared Resources.Click Add a variable.Create a new string variable. See the script for how to reference these in your runbooks. # Ensures you do not inherit an AzContext in your runbook Disable-AzContextAutosave -Scope Process | Out-Null #Storage Account Information $StorageACCKey = Get-AutomationVariable -Name 'stgacckey01' $ContainerName = &quot;Enter the blob container name&quot; # Connect using a Managed Service Identity try { Connect-AzAccount -Identity } catch{ Write-Output &quot;Unable to login. Aborting.&quot;; exit } $Users = Get-AzADUser | Select-Object DisplayName, Id, Mail, UserPrincipalName Write-Output $Users # Exports the data in the $Users variable into a local environmental variable that will store the information whilst running in the Automation account. $Users | Export-Csv &quot;$Env:temp\\Users.csv&quot; -notypeinformation # Creates a new context to enable connection to the storage account. $Context = New-AzureStorageContext -StorageAccountName &quot;whautomationfiledump&quot; -StorageAccountKey $StorageACCKey # This copes the csv file in the $Env:temp/MFAState.csv variable and copies it to the blob. Set-AzureStorageBlobContent -Context $Context -Container $ContainerName -File &quot;$Env:temp\\Users.csv&quot; -Blob &quot;Users.csv&quot; -force  In my experience The test window is not like a command promtp and will not output the commands running or anything at all apart from really confusing errors. Try to build error catching into your script, use the try, catch commands to write the errors to the promtp for debugging. More in this in the testing section at the bottom. "},{"title":"Setup the Schedule​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#setup-the-schedule","content":"This has been mostly regurgitated from this Microsoft link here. From your Automation account, on the left-hand pane Select Schedules under Shared Resources.Select Add a schedule.Select whether the schedule runs once or on a reoccurring schedule by Selecting Once or Recurring. If you Select Once, specify a start time and then Select Create.If you Select Recurring, specify a start time. For Recur every, Select how often you want the runbook to repeat. Select by hour, day, week, or month. Press Create to complete. tip You must publish the runbook before you can assign the schedule to it. Head back to your Runbook.Select Link to schedule at the top.Click the option to Link a schedule to your runbook, Select the schedule you created from the list.Click OK to complete. Example schedule below  "},{"title":"Testing​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#testing","content":""},{"title":"Testing the script​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#testing-the-script","content":"Error handling​ The test pane window for the most part will not output useful errors or show you how the script is running. I'd suggest building error handling and status updates into your script if you wish during debugging, it will help immensely. An example of the try, catch command sytax is below. # Connect using a Managed Service Identity try { Connect-AzAccount -Identity } catch{ Write-Output &quot;Unable to login. Aborting.&quot;; exit }  I'd also suggest using write-output all over the place to confirm progress and variables etc. Shout out Shout out to the VS code module for Automation Accounts, it'll let you pull down the runbook contents and edit in VsCode and upload it again. Highly recommend using this. "},{"title":"Confirm the data export​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#confirm-the-data-export","content":"Navigate to your storage account.Click on the File shares or Containers option, wherever you saved your data to.Click into the share\\container, find your file and Click on the 3 dots to the right of it. Click View\\edit, it should display a basic output of the file. "},{"title":"Further notes​","type":1,"pageTitle":"Create an Automation Account","url":"/docs/Azure/Automation/Automation-Accounts/Create an Automation Account#further-notes","content":"Run As accounts are being deprecated, this method is by far the easiest to use when trying to pull info from AzureAD and Office 365. "},{"title":"Microsoft Graph Cheatsheet","type":0,"sectionRef":"#","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#document-control","content":"Created: 2023/04/22Last Updated: 2023/04/22 "},{"title":"Module Management​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#module-management","content":""},{"title":"Permissions Scopes​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#permissions-scopes","content":"MG Graph uses permissions scopes that you assign at logon, use the command below to locate what permissions scopes you need for your logged in session. Find-MgGraphCommand -command Get-MgUser | Select -First 1 -ExpandProperty Permissions  "},{"title":"Connect & Update​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#connect--update","content":"Connect-MGGraph Update-Module -Name Microsoft.Graph  "},{"title":"Connect to MG Graph with Read-only permissions​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#connect-to-mg-graph-with-read-only-permissions","content":"Connect-MGGraph This will connect with read only permissions to manage Users and Devices. Connect-MgGraph &quot;User.Read.All&quot;, &quot;Calendars.Read.Shared&quot;, &quot;DeviceManagementRBAC.Read.All&quot;, &quot;DeviceManagementServiceConfig.Read.All&quot;, &quot;DeviceManagementConfiguration.Read.All&quot;, &quot;DeviceManagementManagedDevices.Read.All&quot;  "},{"title":"Getting properties from commands​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#getting-properties-from-commands","content":"Getting properties using MGGraph requires &quot;declaring&quot; them as part of the original command, if you don't so this they will be blank in the following commands or pipe. For example, get-mguser -userid username@domain.com | select UserPrincipalName, DisplayName, LastPasswordChangeDateTime will return the UPn &amp; display name but, LastPasswordChangeDateTime will be blank. You would need to type the command in this format, get-mguser -userid username@domain.com -property -Property UserPrincipalName, DisplayName, LastPasswordChangeDateTime | select UserPrincipalName, DisplayName, LastPasswordChangeDateTime.  "},{"title":"User Management​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#user-management","content":""},{"title":"Grab basic user information to work with​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#grab-basic-user-information-to-work-with","content":"$userReport = Get-MgUser -All -property DisplayName, UserPrincipalName, AssignedLicenses, businessphones, CompanyName, CreatedDateTime, Id, jobTitle, LastPasswordChangeDateTime, MobilePhone, Manager, Usertype | ` Select DisplayName, UserPrincipalName, AssignedLicenses, businessphones, CompanyName, CreatedDateTime, Id, jobTitle, LastPasswordChangeDateTime, MobilePhone, Manager, Usertype  "},{"title":"Grab a password report of all users.​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#grab-a-password-report-of-all-users","content":"Get-MgUser -All -Property UserPrincipalName, DisplayName, Id, LastPasswordChangeDateTime,PasswordPolicies | ` Select-Object UserPrincipalName, DisplayName, LastPasswordChangeDateTime,PasswordPolicies, @{l='PasswordAgeDays';e={ (New-TimeSpan -Start $_.LastPasswordChangeDateTime -End (get-date) )TotalDays -as [int] }} | ` Sort-Object PasswordAgeDays  "},{"title":"Device management​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#device-management","content":""},{"title":"Get devices from Intune with their Primary User​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#get-devices-from-intune-with-their-primary-user","content":"Get-MgDeviceManagementManagedDevice # Connect with the relevant permission to read all user and device data. Connect-MgGraph &quot;User.Read.All&quot;, &quot;DeviceManagementRBAC.Read.All&quot;, &quot;DeviceManagementServiceConfig.Read.All&quot;, &quot;DeviceManagementConfiguration.Read.All&quot;, &quot;DeviceManagementManagedDevices.Read.All&quot; $getAllDevices = Get-MgDeviceManagementManagedDevice -All | ` Select DeviceName, UserPrincipalName, EnrolledDateTime, ComplianceState, IsEncrypted, LastSyncDateTime, Id , Manufacturer, Model, OperatingSystem, OSVersion, SerialNumber,@{l='PrimaryUser';e={ $device = $_ ; Get-MgDeviceManagementManagedDeviceUser -ManagedDeviceId $device.id | select -expandproperty UserPrincipalName }} | ` Sort OperatingSystem  "},{"title":"Get Generic Device Report from intune​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#get-generic-device-report-from-intune","content":"# Connect with the relevant permission to read all user and device data. Connect-MgGraph &quot;User.Read.All&quot;, &quot;DeviceManagementRBAC.Read.All&quot;, &quot;DeviceManagementServiceConfig.Read.All&quot;, &quot;DeviceManagementConfiguration.Read.All&quot;, &quot;DeviceManagementManagedDevices.Read.All&quot; # Get all intune &quot;Managed&quot; devices. Get-MgDeviceManagementManagedDevice -All | select DeviceName, AzureAdDeviceId, UserPrincipalName, Id, ComplianceState, EnrolledDateTime, LastSyncDateTime, Manufacturer, Model, OSVersion, SerialNumber | sort UserPrincipalName | ft -AutoSize  "},{"title":"Get a list of Configuration Profiles from Intune​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#get-a-list-of-configuration-profiles-from-intune","content":"Get-MgDeviceManagementDeviceConfiguration # Get Configuration Profiles for an Org. Get-MgDeviceManagementDeviceConfiguration -All | select Id, DisplayName  "},{"title":"Get a list of Compliance policies from Intune​","type":1,"pageTitle":"Microsoft Graph Cheatsheet","url":"/docs/PowerShell/MS-Graph/Microsoft Graph Cheatsheet#get-a-list-of-compliance-policies-from-intune","content":"Get-MgDeviceManagementDeviceCompliancePolicy # Get Compliance policies for an Org. Get-MgDeviceManagementDeviceCompliancePolicy -All | Select Displayname,LastModifiedDateTime, Id  Get a compliancy report for a compliance policy​ Get-MgDeviceManagementDeviceCompliancePolicyDeviceStatuses # Get Compliancy report for a policy Get-MgDeviceManagementDeviceCompliancePolicyDeviceStatuses -DeviceCompliancePolicyId 6ac10074-0704-46d1-8fe2-04fa03d413d4 | Select DeviceDisplayName, Status, UserName  Get a compliance policy report for a single device​ Get-MgDeviceManagementManagedDeviceCompliancePolicyState # Device Compliancy for a single device. Get-MgDeviceManagementManagedDeviceCompliancePolicyState -ManagedDeviceId f2c1e6c3-9330-41c9-9a91-50302c20655d  "},{"title":"PowerShell Cheatsheet","type":0,"sectionRef":"#","url":"/docs/PowerShell/PowerShell-cheatsheet/","content":"","keywords":"IT  KnowledgeBase  Microsoft  Azure  Computers"},{"title":"Document Control​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#document-control","content":"Created: 23/04/22Last Updated: 23/04/22 "},{"title":"Credential Management​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#credential-management","content":""},{"title":"Collect and encrypt credentials​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#collect-and-encrypt-credentials","content":"$credential = Get-Credential $credential.Password | ConvertFrom-SecureString | Set-Content &quot;C:\\temp\\Reporting\\encrypted_password_for_reporting.txt&quot; &lt;# Decrypting it and using it in a script#&gt; # Get the credential $emailusername = &quot;email.address@domain.com&quot; $encrypted = Get-Content &quot;C:\\temp\\encrypted_password_for_reporting.txt&quot; | ConvertTo-SecureString $credential = New-Object System.Management.Automation.PsCredential($emailusername, $encrypted)  "},{"title":"User confirmation statement​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#user-confirmation-statement","content":"&lt;# Disclaimer to confirm user is happy to begin the process. #&gt; Write-Host &quot;Write your warning text here.&quot; -ForegroundColor Yellow Start-Sleep 2 $decisionConfirmation = Read-Host &quot;Are you sure you wish to proceed. Type Y to begin or N to stop here [y/n].&quot; if ($decisionConfirmation -ne 'y') { &lt;# Action if statement is true. #&gt; Write-Host &quot;The script will not proceed any further.&quot; -ForegroundColor Red WriteToLogFile &quot;$(Get-Date) - User selected to not proceed with the script, terminating.&quot; # 'Script terminated.' }  "},{"title":"Error Management​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#error-management","content":""},{"title":"Try and Catch example for error debugging​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#try-and-catch-example-for-error-debugging","content":"try { Connect-AzAccount -Identity } catch{ Write-Output &quot;Unable to login. Aborting.&quot;; exit }  "},{"title":"Create a log file​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#create-a-log-file","content":"The below is a small function that creates the log file and a new command WriteToLogFile, which will add the content to the log file. $date = Get-Date -Format dd-mm-yyyy $logFileLocation = &quot;C:\\Temp\\&quot; &lt;# Create the log file. #&gt; try { &lt;# Try the following. #&gt; function WriteToLogFile ($message) { Add-Content $logFileLocation\\LogFile_$date.log -Value $message } if (Test-Path $logFileLocation\\LogFile_$date.log) { Write-Host 'Log file already exists, deleting and re-creating.' Start-Sleep 2 Remove-Item $logFileLocation\\LogFile_$date.log } WriteToLogFile &quot;$(Get-Date) - Log File created.&quot; } catch { &lt;# Collect and report any errors. #&gt; Write-Host &quot;Failed to create log file at the following location:&quot;$logFileLocation -ForegroundColor Red&quot;, continuing without logging.&quot; Write-Host $_ -ForegroundColor Red WriteToLogFile &quot;$(Get-Date) - $($_)&quot; throw 'Script terminated.' }  "},{"title":"Test multiple item paths​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#test-multiple-item-paths","content":"Test-Path Test multiple paths for files or folders. Test-Path &quot;$Variable1&quot;, &quot;$Variable2&quot;, &quot;$Variable3&quot;  "},{"title":"Importing, Formatting & Searching​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#importing-formatting--searching","content":""},{"title":"Folder Size Report​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#folder-size-report","content":"$directory = C:\\Users\\whornsby # Retrieve the files and the total size of them combines. Note that Folders do not hold file sizes. $getFileSizes | Get-ChildItem -Recurse | Measure-Object -Sum Length | Select-Object @{Name=”Path”; Expression={$directory.FullName}}, @{Name=”Files”; Expression={$_.Count}}, @{Name=”Size(GB)”; Expression={$_.Sum/1GB}} # Converts output to GB $_.Sum/1GB # Converts output to MB $_.Sum/1MB  "},{"title":"Import and filter CSV Files​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#import-and-filter-csv-files","content":"ImportFrom-CSV $csvFile = Import-Csv 'C:\\Temp\\File.csv' # Edited export with devices status notes. # Filter Examples $csvFile | group osVersion $csvFile | group osVersion | select -ExpandProperty property Name| ft -AutoSize  "},{"title":"Windows OS​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#windows-os","content":""},{"title":"Collect System information​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#collect-system-information","content":"systeminfo &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. systeminfo | Out-File -FilePath C:\\SystemDiagnosticCollection\\SystemInfo.txt # Command collects the systeminfo data and dumps it to text file. Write-host 'System Info Collected' # Add this if you're writing a script where you need to update the PowerShell prompt.  "},{"title":"Collect IP address info​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#collect-ip-address-info","content":"Ipconfig &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. ipconfig /all | Out-File -FilePath C:\\SystemDiagnosticCollection\\IpAddressingInfo.txt # Collects the IP info and dumps it to text file. Write-host 'ipconfig ran successfully' # Add this if you're writing a script where you need to update the PowerShell prompt.  "},{"title":"Test Connection​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#test-connection","content":"Test-NetConnection &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Test Connection to Google Test-NetConnection www.google.com -InformationLevel &quot;Detailed&quot; | Out-File -FilePath C:\\SystemDiagnosticCollection\\pingtoGoogle-FQDN.txt  Time stamped ping​ Test-NetConnection &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Time Stamped Ping test Test-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\SystemDiagnosticCollection\\PingtoGoogle-IP.txt Write-host 'Network Tests ran successfully' # Add this if you're writing a script where you need to update the PowerShell prompt.  "},{"title":"Collecting Event Logs​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#collecting-event-logs","content":"Get-EventLog &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Collect System Logs Get-Eventlog -LogName System -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\System_Logs.csv -notype # Collect Application Logs Get-Eventlog -LogName Application -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\Application_Logs.csv -notype Write-host 'Successfully gathered Event Logs'  "},{"title":"Collect Printer information​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#collect-printer-information","content":"Get-printer &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Collect printer information Get-printer | Out-File -FilePath C:\\SystemDiagnosticCollection\\Printer-Info.txt Write-host 'Gathered Printer info' # Add this if you're writing a script where you need to update the PowerShell prompt.  "},{"title":"Collect Group Policy Information​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#collect-group-policy-information","content":"gpresult /v &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Collect printer information gpresult /v | Out-file -FilePath C:\\SystemDiagnosticCollection\\GpResult.txt Write-host 'Gathered GPO status' # Add this if you're writing a script where you need to update the PowerShell prompt.  "},{"title":"Collect Azure Active Directory​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#collect-azure-active-directory","content":"dsregcmd dsregcmd This command is a command prompt command only. &lt;#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#&gt; New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory # Creates the folder and the desired path. Write-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt. # Collect printer information dsregcmd /status | Out-File -FilePath C:\\SystemDiagnosticCollection\\Hybrid-Joined-status.txt Write-host 'Successfully checked for Hybrid-Joined status' # Add this if you're writing a script where you need to update the PowerShell prompt.  Collect the 'key' info from dsregcmd command​ info This script could use a little tidying up but, it should give you an idea of what is needed.  New-Item &quot;C:\\SystemDiagnosticCollection&quot; -itemType Directory Write-host 'Folder created at C:\\SystemDiagnosticCollection' #not finished yet, it'll print out only. Write-host 'Basic AAD Info' dsregcmd /status | select-string -Pattern 'Device Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'AzureADJoined' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'DeviceId' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt dsregcmd /status | select-string -Pattern 'TenantName' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt write-host 'Single Sign on Info' dsregcmd /status | select-string -Pattern 'AzureAdPrt' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt dsregcmd /status | select-string -Pattern 'AzureAdPrtUpdateTime' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt dsregcmd /status | select-string -Pattern 'RefreshPrtDiagnostics' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt Write-host 'System Information' systeminfo | Select-String -Pattern 'OS Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'OS Version' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Original Install Date' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'System Boot Time' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Time Zone' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt systeminfo | Select-String -Pattern 'Total Physical Memory' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt  "},{"title":"Managing SMB Shares​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#managing-smb-shares","content":""},{"title":"Get active SMB Connections​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#get-active-smb-connections","content":"Get-SMBSession  "},{"title":"Get Open files​","type":1,"pageTitle":"PowerShell Cheatsheet","url":"/docs/PowerShell/PowerShell-cheatsheet/#get-open-files","content":"Get-SMBopenFile # All sessions listed. Get-SmbOpenFile -FileId &quot;file ID&quot; | select -Property * # Lists all properties for a particular file ID, for file ID run the command above. # Example of querying live. Get-SmbOpenFile | Select clientcomputername, sessionid, clientusername, path | sort clientusername, path | ft -a # Retrieve active open files. Get-SmbOpenFile | where clientusername -like '*Name*' | Select clientcomputername, sessionid, clientusername,path | sort clientusername, path | ft -a # Search and sort example. # Example usage with variable. $smbOpenFiles = Get-SmbOpenFile | select -Property * # Get all open files information and store in variable. $smbOpenFiles | Select clientcomputername, sessionid,clientusername,path | sort clientusername,path | ft -a # Example of sorting the input.  "}]