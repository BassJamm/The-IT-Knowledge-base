"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4161],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>f});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(o),d=n,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return o?r.createElement(f,i(i({ref:t},p),{},{components:o})):r.createElement(f,i({ref:t},p))}));function f(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,i=new Array(l);i[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:n,i[1]=a;for(var c=2;c<l;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},2083:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const l={draft:!1,id:"NSG Flow log Formatter",title:"NSG Flow log Formatter",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"NSG Flow log Formatter",sidebar_position:2,toc_max_heading_level:4,pagination_label:"NSG Flow log Formatter",tags:["Script","NSG","Flow Log"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"Script will help with readability of NSG flow logs."},i=void 0,a={unversionedId:"Scripts/NSG Flow log Formatter",id:"Scripts/NSG Flow log Formatter",title:"NSG Flow log Formatter",description:"Script will help with readability of NSG flow logs.",source:"@site/docs/Scripts/NSG Flow Log Parser.md",sourceDirName:"Scripts",slug:"/Scripts/NSG Flow log Formatter",permalink:"/Scripts/NSG Flow log Formatter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",tags:[{label:"Script",permalink:"/tags/script"},{label:"NSG",permalink:"/tags/nsg"},{label:"Flow Log",permalink:"/tags/flow-log"}],version:"current",sidebarPosition:2,frontMatter:{draft:!1,id:"NSG Flow log Formatter",title:"NSG Flow log Formatter",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"NSG Flow log Formatter",sidebar_position:2,toc_max_heading_level:4,pagination_label:"NSG Flow log Formatter",tags:["Script","NSG","Flow Log"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"Script will help with readability of NSG flow logs."},sidebar:"tutorialSidebar",previous:{title:"Scripts",permalink:"/category/scripts"},next:{title:"Windows OS Scripts",permalink:"/Scripts/Windows OS Scripts"}},s={},c=[{value:"Document Control",id:"document-control",level:2},{value:"Script",id:"script",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"document-control"},"Document Control"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Created: 23/04/22"),(0,n.kt)("li",{parentName:"ul"},"Last Updated: 23/04/22")),(0,n.kt)("h2",{id:"script"},"Script"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"I didn't write this script, I cannot take any credit for it!")),(0,n.kt)("p",null,"Takes a input json format Azure NSG Flow Log file using -$NsgFlowLogFileName command line option"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"cd C:\\Temp\\\n.\\Parse-NSG-FlowLog_json.ps1 -NsgFlowLogFileName .\\PT1H.json | ft -AutoSize\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'param(\n    [string]$NsgFlowLogFileName = "C:\\Temp\\filename.json"\n)\n \n# Import the logs from the file convert it from json into a powershell object\n$logs = gc $NsgFlowLogFileName  -ErrorAction SilentlyContinue | ConvertFrom-Json | select -ExpandProperty records\n \n# Loop through each entry in the json file\nforeach ($Log in $Logs)\n    {\n    #Get a list of flows\n    $Flows = $log.properties.flows\n \n    # Loop through each flow of each json entry and output the details\n    foreach ($Flow in $Flows)\n        {\n        # Split the flow information to a variable for easier and quicker referencing\n        $FlowInfo = $Flow.flows.flowtuples[0] -split(\',\')\n \n        # Output details as a powershell object\n        [pscustomobject]@{\n            DateTime      = (Get-Date 01.01.1970)+([System.TimeSpan]::fromseconds($FlowInfo[0]))    # Converts time format.\n            NSGName       = $Log.resourceId.split(\'/\')[-1]\n            RuleName      = $Flow.rule\n            Decision      = switch ($FlowInfo[7]) { \'a\' { "Allowed" } ; "d" {"Denied"} }\n            FlowState     = switch ($FlowInfo[8]) { \'B\' { "Begin" } ; "C" {"Continue"} ; "e" {"End"} }\n            SourceIP      = $FlowInfo[1]\n            SourcePort    = $FlowInfo[3]\n            DestIP        = $FlowInfo[2]\n            DestPort      = $FlowInfo[4]\n            Protocol      = switch ($FlowInfo[5]) { \'t\' { "TCP" } ; "u" {"UDP"} }\n            Direction     = switch ($FlowInfo[6]) { \'i\' { "InBound" } ; "o" {"OutBound"} }\n            SourcePackets = $FlowInfo[9]\n            SourceBytes   = $FlowInfo[10]\n            DestPackets   = $FlowInfo[11]\n            DestBytes     = $FlowInfo[12]\n \n            # Below line ends the flow loop, then filters out the empty entries.\n            } | where SourceIP -ne $null\n      }\n    }\n')))}m.isMDXComponent=!0}}]);