"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3306],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||p[u]||r;return n?o.createElement(h,l(l({ref:t},m),{},{components:n})):o.createElement(h,l({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:i,l[1]=a;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const r={draft:!1,id:"PowerShell",title:"PowerShell",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"PowerShell",sidebar_position:4,toc_max_heading_level:4,pagination_label:"PowerShell",tags:["Command Line","PowerShell"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"All things PowerShell."},l=void 0,a={unversionedId:"Command Line References/PowerShell",id:"Command Line References/PowerShell",title:"PowerShell",description:"All things PowerShell.",source:"@site/docs/Command Line References/PowerShell.md",sourceDirName:"Command Line References",slug:"/Command Line References/PowerShell",permalink:"/docs/Command Line References/PowerShell",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",tags:[{label:"Command Line",permalink:"/docs/tags/command-line"},{label:"PowerShell",permalink:"/docs/tags/power-shell"}],version:"current",sidebarPosition:4,frontMatter:{draft:!1,id:"PowerShell",title:"PowerShell",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"PowerShell",sidebar_position:4,toc_max_heading_level:4,pagination_label:"PowerShell",tags:["Command Line","PowerShell"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"All things PowerShell."},sidebar:"tutorialSidebar",previous:{title:"Microsoft Graph",permalink:"/docs/Command Line References/Microsoft Graph"},next:{title:"Scripts",permalink:"/docs/category/scripts"}},s={},c=[{value:"Document Control",id:"document-control",level:2},{value:"Credential Management",id:"credential-management",level:2},{value:"Collect and encrypt credentials",id:"collect-and-encrypt-credentials",level:3},{value:"User confirmation statement",id:"user-confirmation-statement",level:3},{value:"Error Management",id:"error-management",level:2},{value:"Try and Catch example for error debugging",id:"try-and-catch-example-for-error-debugging",level:3},{value:"Create a log file",id:"create-a-log-file",level:3},{value:"Test multiple item paths",id:"test-multiple-item-paths",level:3},{value:"Importing, Formatting &amp; Searching",id:"importing-formatting--searching",level:2},{value:"Folder Size Report",id:"folder-size-report",level:3},{value:"Import and filter CSV Files",id:"import-and-filter-csv-files",level:3},{value:"Windows OS",id:"windows-os",level:2},{value:"Collect System information",id:"collect-system-information",level:3},{value:"Collect IP address info",id:"collect-ip-address-info",level:3},{value:"Test Connection",id:"test-connection",level:3},{value:"Time stamped ping",id:"time-stamped-ping",level:4},{value:"Collecting Event Logs",id:"collecting-event-logs",level:3},{value:"Collect Printer information",id:"collect-printer-information",level:3},{value:"Collect Group Policy Information",id:"collect-group-policy-information",level:3},{value:"Collect Azure Active Directory",id:"collect-azure-active-directory",level:3},{value:"Collect the &#39;key&#39; info from dsregcmd command",id:"collect-the-key-info-from-dsregcmd-command",level:4},{value:"Managing SMB Shares",id:"managing-smb-shares",level:2},{value:"Get active SMB Connections",id:"get-active-smb-connections",level:3},{value:"Get Open files",id:"get-open-files",level:3}],m={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"document-control"},"Document Control"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Created: 23/04/22"),(0,i.kt)("li",{parentName:"ul"},"Last Updated: 23/04/22")),(0,i.kt)("h2",{id:"credential-management"},"Credential Management"),(0,i.kt)("h3",{id:"collect-and-encrypt-credentials"},"Collect and encrypt credentials"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$credential = Get-Credential\n$credential.Password | ConvertFrom-SecureString | Set-Content "C:\\temp\\Reporting\\encrypted_password_for_reporting.txt"\n\n<# Decrypting it and using it in a script#>\n\n# Get the credential\n$emailusername = "email.address@domain.com"\n$encrypted = Get-Content "C:\\temp\\encrypted_password_for_reporting.txt" | ConvertTo-SecureString\n$credential = New-Object System.Management.Automation.PsCredential($emailusername, $encrypted)\n')),(0,i.kt)("h3",{id:"user-confirmation-statement"},"User confirmation statement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'<# Disclaimer to confirm user is happy to begin the process. #>\n\nWrite-Host "Write your warning text here." -ForegroundColor Yellow\nStart-Sleep 2\n$decisionConfirmation = Read-Host "Are you sure you wish to proceed. Type Y to begin or N to stop here [y/n]."\n\nif ($decisionConfirmation -ne \'y\') {\n    <# Action if  statement is true. #>\n    Write-Host "The script will not proceed any further." -ForegroundColor Red\n    WriteToLogFile "$(Get-Date) - User selected to not proceed with the script, terminating."\n    # \'Script terminated.\' \n}\n')),(0,i.kt)("h2",{id:"error-management"},"Error Management"),(0,i.kt)("h3",{id:"try-and-catch-example-for-error-debugging"},"Try and Catch example for error debugging"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'try {\n    Connect-AzAccount -Identity\n}\ncatch{\n    Write-Output "Unable to login. Aborting."; \n    exit\n}\n')),(0,i.kt)("h3",{id:"create-a-log-file"},"Create a log file"),(0,i.kt)("p",null,"The below is a small function that creates the log file and a new command ",(0,i.kt)("inlineCode",{parentName:"p"},"WriteToLogFile"),", which will add the content to the log file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$date = Get-Date -Format dd-mm-yyyy\n$logFileLocation = "C:\\Temp\\"\n\n<# Create the log file. #>\n\ntry {\n    <# Try the following. #>\n    function WriteToLogFile ($message) {\n        Add-Content $logFileLocation\\LogFile_$date.log -Value $message\n    }\n    if (Test-Path $logFileLocation\\LogFile_$date.log) {\n        Write-Host \'Log file already exists, deleting and re-creating.\'\n        Start-Sleep 2\n        Remove-Item $logFileLocation\\LogFile_$date.log\n    }\n    WriteToLogFile "$(Get-Date) - Log File created."\n}\ncatch {\n    <# Collect and report any errors. #>\n    Write-Host "Failed to create log file at the following location:"$logFileLocation -ForegroundColor Red", continuing without logging."\n    Write-Host $_ -ForegroundColor Red\n    WriteToLogFile "$(Get-Date) - $($_)"\n    throw  \'Script terminated.\' \n}\n')),(0,i.kt)("h3",{id:"test-multiple-item-paths"},"Test multiple item paths"),(0,i.kt)("p",null,"Test-Path"),(0,i.kt)("p",null,"Test multiple paths for files or folders."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'Test-Path "$Variable1", "$Variable2", "$Variable3"\n')),(0,i.kt)("h2",{id:"importing-formatting--searching"},"Importing, Formatting & Searching"),(0,i.kt)("h3",{id:"folder-size-report"},"Folder Size Report"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"$directory = C:\\Users\\whornsby\n \n# Retrieve the files and the total size of them combines. Note that Folders do not hold file sizes.\n$getFileSizes | Get-ChildItem -Recurse | Measure-Object -Sum Length | Select-Object @{Name=\u201dPath\u201d; Expression={$directory.FullName}}, @{Name=\u201dFiles\u201d; Expression={$_.Count}}, @{Name=\u201dSize(GB)\u201d; Expression={$_.Sum/1GB}}\n \n# Converts output to GB\n$_.Sum/1GB\n \n# Converts output to MB\n$_.Sum/1MB\n")),(0,i.kt)("h3",{id:"import-and-filter-csv-files"},"Import and filter CSV Files"),(0,i.kt)("p",null,"ImportFrom-CSV"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"$csvFile = Import-Csv 'C:\\Temp\\File.csv' # Edited export with devices status notes.\n  \n# Filter Examples\n$csvFile | group osVersion \n$csvFile | group osVersion | select -ExpandProperty property Name| ft -AutoSize\n")),(0,i.kt)("h2",{id:"windows-os"},"Windows OS"),(0,i.kt)("h3",{id:"collect-system-information"},"Collect System information"),(0,i.kt)("p",null,"systeminfo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n\nsysteminfo | Out-File -FilePath C:\\SystemDiagnosticCollection\\SystemInfo.txt # Command collects the systeminfo data and dumps it to text file.\nWrite-host 'System Info Collected' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,i.kt)("h3",{id:"collect-ip-address-info"},"Collect IP address info"),(0,i.kt)("p",null,"Ipconfig"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\nipconfig /all | Out-File -FilePath C:\\SystemDiagnosticCollection\\IpAddressingInfo.txt # Collects the IP info and dumps it to text file.\nWrite-host 'ipconfig ran successfully' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,i.kt)("h3",{id:"test-connection"},"Test Connection"),(0,i.kt)("p",null,"Test-NetConnection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item "C:\\SystemDiagnosticCollection" -itemType Directory # Creates the folder and the desired path.\nWrite-host \'Folder created at C:\\SystemDiagnosticCollection\' # Add this if you\'re writing a script where you need to update the PowerShell prompt.\n\n# Test Connection to Google\nTest-NetConnection www.google.com -InformationLevel "Detailed" | Out-File -FilePath C:\\SystemDiagnosticCollection\\pingtoGoogle-FQDN.txt\n')),(0,i.kt)("h4",{id:"time-stamped-ping"},"Time stamped ping"),(0,i.kt)("p",null,"Test-NetConnection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showlineNumbers",showlineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Time Stamped Ping test\nTest-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\SystemDiagnosticCollection\\PingtoGoogle-IP.txt\nWrite-host 'Network Tests ran successfully' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,i.kt)("h3",{id:"collecting-event-logs"},"Collecting Event Logs"),(0,i.kt)("p",null,"Get-EventLog"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Collect System Logs\nGet-Eventlog -LogName System -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\System_Logs.csv -notype\n# Collect Application Logs\nGet-Eventlog -LogName Application -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\Application_Logs.csv -notype\nWrite-host 'Successfully gathered Event Logs'\n")),(0,i.kt)("h3",{id:"collect-printer-information"},"Collect Printer information"),(0,i.kt)("p",null,"Get-printer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Collect printer information\nGet-printer | Out-File -FilePath C:\\SystemDiagnosticCollection\\Printer-Info.txt\nWrite-host 'Gathered Printer info' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,i.kt)("h3",{id:"collect-group-policy-information"},"Collect Group Policy Information"),(0,i.kt)("p",null,"gpresult /v"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Collect printer information\ngpresult /v | Out-file -FilePath C:\\SystemDiagnosticCollection\\GpResult.txt\nWrite-host 'Gathered GPO status' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,i.kt)("h3",{id:"collect-azure-active-directory"},"Collect Azure Active Directory"),(0,i.kt)("p",null,"dsregcmd"),(0,i.kt)("admonition",{title:"dsregcmd",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This command is a command prompt command only.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Collect printer information\ndsregcmd /status | Out-File -FilePath C:\\SystemDiagnosticCollection\\Hybrid-Joined-status.txt\nWrite-host 'Successfully checked for Hybrid-Joined status' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,i.kt)("h4",{id:"collect-the-key-info-from-dsregcmd-command"},"Collect the 'key' info from dsregcmd command"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This script could use a little tidying up but, it should give you an idea of what is needed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' #not finished yet, it'll print out only.\n\nWrite-host 'Basic AAD Info'\ndsregcmd /status | select-string -Pattern 'Device Name'  | Out-File -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'AzureADJoined' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'DeviceId' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'TenantName' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\n\nwrite-host 'Single Sign on Info'\ndsregcmd /status | select-string -Pattern 'AzureAdPrt' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\ndsregcmd /status | select-string -Pattern 'AzureAdPrtUpdateTime' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\ndsregcmd /status | select-string -Pattern 'RefreshPrtDiagnostics' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\n\nWrite-host 'System Information'\nsysteminfo | Select-String -Pattern 'OS Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'OS Version' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Original Install Date' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'System Boot Time' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Time Zone' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Total Physical Memory' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\n")),(0,i.kt)("h2",{id:"managing-smb-shares"},"Managing SMB Shares"),(0,i.kt)("h3",{id:"get-active-smb-connections"},"Get active SMB Connections"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"Get-SMBSession\n")),(0,i.kt)("h3",{id:"get-open-files"},"Get Open files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"Get-SMBopenFile # All sessions listed.\nGet-SmbOpenFile -FileId \"file ID\" | select -Property * # Lists all properties for a particular file ID, for file ID run the command above.\n\n# Example of querying live.\nGet-SmbOpenFile | Select clientcomputername, sessionid, clientusername, path | sort clientusername, path | ft -a # Retrieve active open files.\nGet-SmbOpenFile | where clientusername -like '*Name*' | Select clientcomputername, sessionid, clientusername,path | sort clientusername, path | ft -a # Search and sort example.\n\n# Example usage with variable.\n$smbOpenFiles = Get-SmbOpenFile | select -Property * # Get all open files information and store in variable.\n$smbOpenFiles | Select clientcomputername, sessionid,clientusername,path | sort clientusername,path | ft -a # Example of sorting the input.\n")))}p.isMDXComponent=!0}}]);