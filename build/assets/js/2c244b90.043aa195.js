"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2794],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>p});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(r),h=a,p=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return r?n.createElement(p,i(i({ref:t},m),{},{components:r})):n.createElement(p,i({ref:t},m))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4459:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={draft:!1,id:"Git Cheatsheet",title:"Git Cheatsheet",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"Git Cheatsheet",sidebar_position:1,toc_max_heading_level:4,pagination_label:"Git Cheatsheet",tags:["Git","Command-Line-Ref"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"Git command line refernce."},i=void 0,s={unversionedId:"PowerShell/Git/Git Cheatsheet",id:"PowerShell/Git/Git Cheatsheet",title:"Git Cheatsheet",description:"Git command line refernce.",source:"@site/docs/PowerShell/Git/Git-cheatsheet.md",sourceDirName:"PowerShell/Git",slug:"/PowerShell/Git/Git Cheatsheet",permalink:"/docs/PowerShell/Git/Git Cheatsheet",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",tags:[{label:"Git",permalink:"/docs/tags/git"},{label:"Command-Line-Ref",permalink:"/docs/tags/command-line-ref"}],version:"current",sidebarPosition:1,frontMatter:{draft:!1,id:"Git Cheatsheet",title:"Git Cheatsheet",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"Git Cheatsheet",sidebar_position:1,toc_max_heading_level:4,pagination_label:"Git Cheatsheet",tags:["Git","Command-Line-Ref"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"Git command line refernce."},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/docs/category/git"},next:{title:"PowerShell",permalink:"/docs/category/powershell-1"}},l={},c=[{value:"Document Control",id:"document-control",level:2},{value:"Repo Status",id:"repo-status",level:2},{value:"Stage files",id:"stage-files",level:2},{value:"Un-stage files",id:"un-stage-files",level:2},{value:"Commit staged files",id:"commit-staged-files",level:2},{value:"Push changes to remote Repo",id:"push-changes-to-remote-repo",level:2},{value:"Un-do recent commit",id:"un-do-recent-commit",level:2},{value:"Merge branch into mainmaster",id:"merge-branch-into-mainmaster",level:2}],m={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"document-control"},"Document Control"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Created: 23/05/06"),(0,a.kt)("li",{parentName:"ul"},"Last Updated: 23/05/06")),(0,a.kt)("h2",{id:"repo-status"},"Repo Status"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"# make sure to change location to the local git repo folder.\n# Get git status update, this will tell you the status of commits, if you need to add un-tracked files, or push\\pull updates.\ngit status\n")),(0,a.kt)("h2",{id:"stage-files"},"Stage files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"# Add untracked file to git for commit (stage the file).\ngit add 'file name'\n")),(0,a.kt)("h2",{id:"un-stage-files"},"Un-stage files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"# To unstage (remove) all files that have not been committed, -f = Force, -d = Directory\ngit reset -f -d\n")),(0,a.kt)("h2",{id:"commit-staged-files"},"Commit staged files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'# Commit staged changes to repo.\ngit commit -m "COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT"\n\n# Stage all changes and commit with comment, -a = all changes, -m = main branch.\ngit commit -a -m "COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT"\n')),(0,a.kt)("h2",{id:"push-changes-to-remote-repo"},"Push changes to remote Repo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"\n# Push your commited changes to remote repo.\nGit push\n")),(0,a.kt)("h2",{id:"un-do-recent-commit"},"Un-do recent commit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"# To undo the most recent commit - A Git commit should not be reversed if you already pushed it to the remote repository.\ngit reset HEAD~1\n")),(0,a.kt)("h2",{id:"merge-branch-into-mainmaster"},"Merge branch into main\\master"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"# When you are ready to add your changes to the default branch, you merge the feature branch into it\ngit checkout 'default-branch'\ngit merge 'feature-branch'\n")))}d.isMDXComponent=!0}}]);