"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,g=p["".concat(s,".").concat(u)]||p[u]||d[u]||o;return n?i.createElement(g,a(a({ref:t},m),{},{components:n})):i.createElement(g,a({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},992:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={draft:!1,id:"Code-Snippets",title:"Code-Snippets",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"Code-Snippets",sidebar_position:4,toc_max_heading_level:4,pagination_label:"Code-Snippets",tags:["Command Line","PowerShell"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"All things PowerShell."},a=void 0,l={unversionedId:"PowerShell/PowerShell/Code-Snippets",id:"PowerShell/PowerShell/Code-Snippets",title:"Code-Snippets",description:"All things PowerShell.",source:"@site/docs/PowerShell/PowerShell/Code-Snippets.md",sourceDirName:"PowerShell/PowerShell",slug:"/PowerShell/PowerShell/Code-Snippets",permalink:"/docs/PowerShell/PowerShell/Code-Snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",tags:[{label:"Command Line",permalink:"/docs/tags/command-line"},{label:"PowerShell",permalink:"/docs/tags/power-shell"}],version:"current",sidebarPosition:4,frontMatter:{draft:!1,id:"Code-Snippets",title:"Code-Snippets",hide_title:!1,hide_table_of_contents:!1,sidebar_label:"Code-Snippets",sidebar_position:4,toc_max_heading_level:4,pagination_label:"Code-Snippets",tags:["Command Line","PowerShell"],custom_edit_url:"https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md",description:"All things PowerShell."},sidebar:"tutorialSidebar",previous:{title:"PowerShell",permalink:"/docs/category/powershell-1"},next:{title:"Command Reference",permalink:"/docs/PowerShell/PowerShell/Command Reference"}},s={},c=[{value:"Script Template",id:"script-template",level:2},{value:"Collect and Encrypt Credentials",id:"collect-and-encrypt-credentials",level:2},{value:"User confirmation statement",id:"user-confirmation-statement",level:2},{value:"Log file function",id:"log-file-function",level:2},{value:"Folder Size Report",id:"folder-size-report",level:2},{value:"Time stamped ping",id:"time-stamped-ping",level:2},{value:"Collecting Event Logs",id:"collecting-event-logs",level:2},{value:"Collect Printer information",id:"collect-printer-information",level:2},{value:"Collect the &#39;key&#39; info from dsregcmd command",id:"collect-the-key-info-from-dsregcmd-command",level:2},{value:"Get Open files",id:"get-open-files",level:2},{value:"Uninstall App using Uninstall String",id:"uninstall-app-using-uninstall-string",level:2},{value:"PSSendGrid Module Example",id:"pssendgrid-module-example",level:2},{value:"Assign Permissions to Managed Identity",id:"assign-permissions-to-managed-identity",level:2},{value:"Get FISMO roles",id:"get-fismo-roles",level:2},{value:"Adding output from two sources in the PipeLine",id:"adding-output-from-two-sources-in-the-pipeline",level:2},{value:"Direct Send",id:"direct-send",level:2},{value:"Find Microsoft Graph Permissions Scopes",id:"find-microsoft-graph-permissions-scopes",level:2},{value:"Microsoft Graph Connection Scopes",id:"microsoft-graph-connection-scopes",level:2},{value:"Azure AD User Password Reset Report",id:"azure-ad-user-password-reset-report",level:2},{value:"Get Intune Device Report with Primary User",id:"get-intune-device-report-with-primary-user",level:2},{value:"List Intune Configuration Profiles",id:"list-intune-configuration-profiles",level:2},{value:"List Intune Compliance Policies",id:"list-intune-compliance-policies",level:2},{value:"List Compliance Policies for a single device",id:"list-compliance-policies-for-a-single-device",level:3},{value:"Grant Partner Access to Azure Sub",id:"grant-partner-access-to-azure-sub",level:2}],m={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"script-template"},"Script Template"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Script Template."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'<# Internal documentation fields.\n    Script Title: [Title of your script]\n    Description: [Brief description of the script\'s purpose]\n    Author: [Your name or organization]\n    Date: [Date of script creation or last modification]\n#>\n<# Parameters that show up in command line using `-help`.\n    .SYNOPSIS\n        Retrieves user information from Active Directory.\n    .PARAMETER Username\n        Specifies the username of the user to retrieve.\n    .OUTPUTS\n        System.Management.Automation.PSObject\n    .EXAMPLE\n        Get-User -Username "jdoe"\n    #>\n\n# Script Parameters\nparam (\n    # [Parameter 1 Description]\n    [Parameter(Mandatory = $true)]\n    [string]$Parameter1,\n\n    # [Parameter 2 Description]\n    [Parameter(Mandatory = $false)]\n    [int]$Parameter2 = 10\n)\n\n# Script Initialization\nWrite-Host "Initializing the script..."\n\ntry {\n    # Main Script Logic\n    Write-Host "Executing the main logic of the script..."\n\n    # Your code goes here...\n\n    # Example: Outputting parameter values\n    Write-Host "Parameter 1: $Parameter1"\n    Write-Host "Parameter 2: $Parameter2"\n\n    # End of Script\n    Write-Host "Script execution completed."\n\n} catch {\n    # Error Handling\n    Write-Host "An error occurred: $($_.Exception.Message)"\n    # Additional error handling and reporting can be added as needed\n}\n')),(0,r.kt)("h2",{id:"collect-and-encrypt-credentials"},"Collect and Encrypt Credentials"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-Credential"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$credential = Get-Credential\n$credential.Password | ConvertFrom-SecureString | Set-Content "C:\\temp\\Reporting\\encrypted_password_for_reporting.txt"\n\n<# Decrypting it and using it in a script#>\n\n# Get the credential\n$emailusername = "email.address@domain.com"\n$encrypted = Get-Content "C:\\temp\\encrypted_password_for_reporting.txt" | ConvertTo-SecureString\n$credential = New-Object System.Management.Automation.PsCredential($emailusername, $encrypted)\n')),(0,r.kt)("h2",{id:"user-confirmation-statement"},"User confirmation statement"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Read-Host"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'<# Disclaimer to confirm user is happy to begin the process. #>\n\nWrite-Host "Write your warning text here." -ForegroundColor Yellow\nStart-Sleep 2\n$decisionConfirmation = Read-Host "Are you sure you wish to proceed. Type Y to begin or N to stop here [y/n]."\n\nif ($decisionConfirmation -ne \'y\') {\n    <# Action if  statement is true. #>\n    Write-Host "The script will not proceed any further." -ForegroundColor Red\n    WriteToLogFile "$(Get-Date) - User selected to not proceed with the script, terminating."\n    # \'Script terminated.\' \n}\n')),(0,r.kt)("h2",{id:"log-file-function"},"Log file function"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"The below is a small function that creates the log file and a new command ",(0,r.kt)("inlineCode",{parentName:"p"},"WriteToLogFile"),", which will add the content to the log file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$date = Get-Date -Format dd-mm-yyyy\n$logFileLocation = "C:\\Temp\\"\n\n<# Create the log file. #>\n\ntry {\n    <# Try the following. #>\n    function WriteToLogFile ($message) {\n        Add-Content $logFileLocation\\LogFile_$date.log -Value $message\n    }\n    if (Test-Path $logFileLocation\\LogFile_$date.log) {\n        Write-Host \'Log file already exists, deleting and re-creating.\'\n        Start-Sleep 2\n        Remove-Item $logFileLocation\\LogFile_$date.log\n    }\n    WriteToLogFile "$(Get-Date) - Log File created."\n}\ncatch {\n    <# Collect and report any errors. #>\n    Write-Host "Failed to create log file at the following location:"$logFileLocation -ForegroundColor Red", continuing without logging."\n    Write-Host $_ -ForegroundColor Red\n    WriteToLogFile "$(Get-Date) - $($_)"\n    throw  \'Script terminated.\' \n}\n')),(0,r.kt)("h2",{id:"folder-size-report"},"Folder Size Report"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"########################## Basic File report for the directory you're currently in. ##########################\nGet-ChildItem | Select FullName,@{l='Size(GB)';e={ [math]::round($_.length/1024,2) } }, CreationTime, LastAccessTime, LastWriteTime\n\n########################## Folder size. ##########################\n# /1MB - Convert to MB.\n# /1GB - Convert to GB\n(gci -path \"Folder Path\" -Recurse | measure -Property Length -Sum).sum /1MB\n\n# Round to 2 decimal places.\n[Math]::round((gci .\\Networking\\ -Recurse | measure -Property Length -Sum).sum /1MB,2)\n")),(0,r.kt)("h2",{id:"time-stamped-ping"},"Time stamped ping"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Test-NetConnection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showlineNumbers",showlineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Time Stamped Ping test\nTest-connection 8.8.8.8 -count 10 | format-table -AutoSize @{n='TimeStamp';e={Get-Date}},__SERVER, Address, ProtocolAddress, ResponseTime | Out-File -FilePath C:\\SystemDiagnosticCollection\\PingtoGoogle-IP.txt\nWrite-host 'Network Tests ran successfully' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,r.kt)("h2",{id:"collecting-event-logs"},"Collecting Event Logs"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-EventLog"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Collect System Logs\nGet-Eventlog -LogName System -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\System_Logs.csv -notype\n# Collect Application Logs\nGet-Eventlog -LogName Application -EntryType Error,Warning -After (Get-Date).AddHours(-2) | Export-csv c:\\SystemDiagnosticCollection\\Application_Logs.csv -notype\nWrite-host 'Successfully gathered Event Logs'\n")),(0,r.kt)("h2",{id:"collect-printer-information"},"Collect Printer information"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-printer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<#The Command below relies on there being a folder created before running the command, use the command below to do this if needed.#>\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory # Creates the folder and the desired path.\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' # Add this if you're writing a script where you need to update the PowerShell prompt.\n\n# Collect printer information\nGet-printer | Out-File -FilePath C:\\SystemDiagnosticCollection\\Printer-Info.txt\nWrite-host 'Gathered Printer info' # Add this if you're writing a script where you need to update the PowerShell prompt.\n")),(0,r.kt)("h2",{id:"collect-the-key-info-from-dsregcmd-command"},"Collect the 'key' info from dsregcmd command"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"dsregcmd /status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"\nNew-Item \"C:\\SystemDiagnosticCollection\" -itemType Directory\nWrite-host 'Folder created at C:\\SystemDiagnosticCollection' #not finished yet, it'll print out only.\n\nWrite-host 'Basic AAD Info'\ndsregcmd /status | select-string -Pattern 'Device Name'  | Out-File -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'AzureADJoined' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'DeviceId' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\ndsregcmd /status | select-string -Pattern 'TenantName' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Basic-AAD-Info.txt\n\nwrite-host 'Single Sign on Info'\ndsregcmd /status | select-string -Pattern 'AzureAdPrt' | Out-File -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\ndsregcmd /status | select-string -Pattern 'AzureAdPrtUpdateTime' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\ndsregcmd /status | select-string -Pattern 'RefreshPrtDiagnostics' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\Single-Sign-on-Info.txt\n\nWrite-host 'System Information'\nsysteminfo | Select-String -Pattern 'OS Name' | Out-File -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'OS Version' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Original Install Date' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'System Boot Time' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Time Zone' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\nsysteminfo | Select-String -Pattern 'Total Physical Memory' | Out-File -Append -FilePath C:\\SystemDiagnosticCollection\\System-Information.txt\n")),(0,r.kt)("h2",{id:"get-open-files"},"Get Open files"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-SMBopenFile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"Get-SMBopenFile # All sessions listed.\nGet-SmbOpenFile -FileId \"file ID\" | select -Property * # Lists all properties for a particular file ID, for file ID run the command above.\n\n# Example of querying live.\nGet-SmbOpenFile | Select clientcomputername, sessionid, clientusername, path | sort clientusername, path | ft -a # Retrieve active open files.\nGet-SmbOpenFile | where clientusername -like '*Name*' | Select clientcomputername, sessionid, clientusername,path | sort clientusername, path | ft -a # Search and sort example.\n\n# Example usage with variable.\n$smbOpenFiles = Get-SmbOpenFile | select -Property * # Get all open files information and store in variable.\n$smbOpenFiles | Select clientcomputername, sessionid,clientusername,path | sort clientusername,path | ft -a # Example of sorting the input.\n")),(0,r.kt)("h2",{id:"uninstall-app-using-uninstall-string"},"Uninstall App using Uninstall String"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-ItemProperty"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"$regKeyPaths = @(\n  'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall'\n  'HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'\n)\n\n$regItems = Get-ChildItem -Path $regKeyPaths | Get-ItemProperty | where displayname -Like '*searchterm*' | Select-Object DisplayName, Uninstallstring\nforeach ($string in $regitems) {\n    $uninstallString = $string.Uninstallstring.replace('MsiExec.exe','').replace('/I','/x ').replace('{','').replace('}','')\n    Start-Process C:\\Windows\\System32\\msiexec.exe -ArgumentList $uninstallString -wait -Verbose\n}\n\nStart-Process C:\\Windows\\System32\\msiexec.exe -ArgumentList $uninstallStrings[0] -wait\nStart-Process C:\\Windows\\System32\\msiexec.exe -ArgumentList $uninstallStrings[1] -wait\n")),(0,r.kt)("h2",{id:"pssendgrid-module-example"},"PSSendGrid Module Example"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Send-PSSendGridMail"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$sendGridToken = "SG.apikey"\n$attachmentPath = $reportFile # File path to the attachment\\data.\n$attachmentDisposition = "attachment" # Value can either be "attachment" or "inline", inlines is for images, check the command help examples for info. \n$emailBody = @(\n  "Ener text here, the \'`n\' adds a carrige return `n"\n) -join " "\n\ntry {\n    \n    # Basic email with just content.\n    $Parameters = @{\n        FromAddress             = "fromaddress@domain.com"\n        ToAddress               = "AddressOne@domain.com", "AddressTwo@domain.com"\n        Subject                 = "Subject text"\n        Body                    = $emailBody\n        AttachmentPath          = $attachmentPath\n        AttachmentDisposition   = $attachmentDisposition\n        Token                   = $sendGridToken\n        FromName                = "Name to show who from."\n        ToName                  = "test"\n    }\n} catch {\n    $_\n}\nSend-PSSendGridMail @Parameters\n')),(0,r.kt)("h2",{id:"assign-permissions-to-managed-identity"},"Assign Permissions to Managed Identity"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'# Your tenant id.\n$TenantID=""\n# Microsoft Graph App ID (DON\'T CHANGE).\n$GraphAppId = "00000003-0000-0000-c000-000000000000"\n# Name of the manage identity (same as the Logic App name).\n$DisplayNameOfMSI="" \n# Check the Microsoft Graph documentation for the permission you need for the operation.\n$PermissionName = "User.Read.All" \n\n# Install the module (You need admin on the machine)\nInstall-Module AzureAD -Scope CurrentUser \n\n# Connect to Azure AD via tenant ID, you\'ll need an admin account to login with though.\nConnect-AzureAD -TenantId $TenantID\n# Collects the Target System Managed Identities information into the MSI variable.\n$MSI = (Get-AzureADServicePrincipal -Filter "displayName eq \'$DisplayNameOfMSI\'")\nStart-Sleep -Seconds 10\n# Store the Microsoft Graph API informaiton into the GraphServicePrincipal variable.\n$GraphServicePrincipal = Get-AzureADServicePrincipal -Filter "appId eq \'$GraphAppId\'"\n# Searches Microsoft Graph API for the value matching the PermissionName variable populated above and stores this in the AppRole Variable.\n$AppRole = $GraphServicePrincipal.AppRoles |  Where-Object {$_.Value -eq $PermissionName -and $_.AllowedMemberTypes -contains "Application"}\n# Assigned the permission from the Microsoft Graph API to the target Managed Identity.\nNew-AzureADServiceAppRoleAssignment -ObjectId $MSI.ObjectId -ResourceId $GraphServicePrincipal.ObjectId -Id $appRole.Id -PrincipalId $MSI.ObjectId\n')),(0,r.kt)("h2",{id:"get-fismo-roles"},"Get FISMO roles"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-ADForest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"$properties = @(\n    'SchemaMaster',\n    'DomainNamingMaster',\n    @{ n='pdcemulator';e={ Get-ADDomain | Select -ExpandProperty pdcemulator} },\n    @{ n='ridmaster';e={ Get-ADDomain | Select -ExpandProperty ridmaster} },\n    @{ n='infrastructuremaster';e={ Get-ADDomain | Select -ExpandProperty infrastructuremaster} }\n)\n\nGet-ADForest | Select $properties | Format-List\n")),(0,r.kt)("h2",{id:"adding-output-from-two-sources-in-the-pipeline"},"Adding output from two sources in the PipeLine"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"$source1 = # Some sort of input source.\n$source2 = # Secondary input source.\n\n# Take source1 variable & add a property to the output from source2.\n# You may need to include 'Select -ExpandProperty attributeName' if you get brackets or other special characters in your final output.\n$source1 | Select *, @{ l='itemName';e={$source2 | where mostrecentuser -Match $_.attributeName}}, * -ExcludeProperty attributeName\n")),(0,r.kt)("h2",{id:"direct-send"},"Direct Send"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Send-MailMessage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"# Get the credential\n$credential = Get-Credential\n\n## Define the Send-MailMessage parameters\n$mailParams = @{\n    SmtpServer                 = 'smtp.office365.com'\n    Port                       = '587' # or '25' if not using TLS\n    UseSSL                     = $true ## or not if using non-TLS\n    Credential                 = $credential\n    From                       = 'Email.Address@domain.com'\n    To                         = 'Email.Address@domain.com'# , 'recipient@NotYourDomain.com'\n    Subject                    = \"SMTP Client Submission - $(Get-Date -Format g)\"\n    Body                       = 'This is a test email using SMTP Client Submission'\n    Attachment                 = \"$env:USERPROFILE\\Desktop\\File.csv\"\n    DeliveryNotificationOption = 'OnFailure', 'OnSuccess'\n}\n\n## Send the message\nSend-MailMessage @mailParams\n")),(0,r.kt)("h2",{id:"find-microsoft-graph-permissions-scopes"},"Find Microsoft Graph Permissions Scopes"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Find-MgGraphCommand"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"Find-MgGraphCommand -command Get-MgUser | Select -First 1 -ExpandProperty Permissions\n")),(0,r.kt)("h2",{id:"microsoft-graph-connection-scopes"},"Microsoft Graph Connection Scopes"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Connect-MGGraph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$mggraphScopes = @(\n    "User.Read.All",\n    "Group.Read.All",\n    "DeviceManagementRBAC.Read.All",\n    "DeviceManagementServiceConfig.Read.All",\n    "DeviceManagementConfiguration.Read.All",\n    "DeviceManagementManagedDevices.Read.All",\n    "DeviceManagementApps.Read.All",\n    "Policy.Read.All"\n)\n\nConnect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID\n')),(0,r.kt)("h2",{id:"azure-ad-user-password-reset-report"},"Azure AD User Password Reset Report"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-MGUser"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"$properties = @(\n    'UserPrincipalName',\n    'DisplayName',\n    'LastPasswordChangeDateTime',\n    'PasswordPolicies',\n     @{l='PasswordAgeDays';e={ (New-TimeSpan -Start $_.LastPasswordChangeDateTime -End (get-date) )TotalDays -as [int] }}\n)\nGet-MgUser -All -Property UserPrincipalName, DisplayName, Id, LastPasswordChangeDateTime,PasswordPolicies | Select-Object $properties  | Sort-Object PasswordAgeDays \n")),(0,r.kt)("h2",{id:"get-intune-device-report-with-primary-user"},"Get Intune Device Report with Primary User"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-MGDeviceManagementManagedDevice"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"$mggraphScopes = @(\n    \"User.Read.All\",\n    \"Group.Read.All\",\n    \"DeviceManagementRBAC.Read.All\",\n    \"DeviceManagementServiceConfig.Read.All\",\n    \"DeviceManagementConfiguration.Read.All\",\n    \"DeviceManagementManagedDevices.Read.All\",\n    \"DeviceManagementApps.Read.All\",\n    \"Policy.Read.All\"\n)\n\nConnect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID\n\n$properties = @(\n    'DeviceName', \n    'UserPrincipalName', \n    'EnrolledDateTime', \n    'ComplianceState', \n    'IsEncrypted', \n    'LastSyncDateTime', \n    'Id', \n    'Manufacturer', \n    'Model', \n    'OperatingSystem', \n    'OSVersion', \n    'SerialNumber',\n    @{l='PrimaryUser';e={$device = $_;Get-MgDeviceManagementManagedDeviceUser -ManagedDeviceId $device.id | select -expandproperty UserPrincipalName}} \n)\n \n$getAllDevices = Get-MgDeviceManagementManagedDevice -All | Select-Object $properties | Sort OperatingSystem\n")),(0,r.kt)("h2",{id:"list-intune-configuration-profiles"},"List Intune Configuration Profiles"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-MgDeviceManagementDeviceConfiguration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$mggraphScopes = @(\n    "User.Read.All",\n    "Group.Read.All",\n    "DeviceManagementRBAC.Read.All",\n    "DeviceManagementServiceConfig.Read.All",\n    "DeviceManagementConfiguration.Read.All",\n    "DeviceManagementManagedDevices.Read.All",\n    "DeviceManagementApps.Read.All",\n    "Policy.Read.All"\n)\n\nConnect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID\n\n# Get Configuration Profiles for an Org.\nGet-MgDeviceManagementDeviceConfiguration -All | select Id, DisplayName\n')),(0,r.kt)("h2",{id:"list-intune-compliance-policies"},"List Intune Compliance Policies"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Get-MgDeviceManagementDeviceCompliancePolicy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$mggraphScopes = @(\n    "User.Read.All",\n    "Group.Read.All",\n    "DeviceManagementRBAC.Read.All",\n    "DeviceManagementServiceConfig.Read.All",\n    "DeviceManagementConfiguration.Read.All",\n    "DeviceManagementManagedDevices.Read.All",\n    "DeviceManagementApps.Read.All",\n    "Policy.Read.All"\n)\n\nConnect-MgGraph -Scopes $mggraphScopes -TenantId $tenantID\n# Get Compliance policies for an Org.\nGet-MgDeviceManagementDeviceCompliancePolicy -All | Select Displayname,LastModifiedDateTime, Id\n')),(0,r.kt)("h3",{id:"list-compliance-policies-for-a-single-device"},"List Compliance Policies for a single device"),(0,r.kt)("p",null,"Get-MgDeviceManagementManagedDeviceCompliancePolicyState"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"# Device Compliancy for a single device.\nGet-MgDeviceManagementManagedDeviceCompliancePolicyState -ManagedDeviceId \n")),(0,r.kt)("h2",{id:"grant-partner-access-to-azure-sub"},"Grant Partner Access to Azure Sub"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'# Connect to Sub.\nConnect-AzAccount -TenantID "<Customer TenantID>"\n\n# Set the subscription context you want to add partner permissions too.\nSet-AzContext -SubscriptionID "<Customer Subscription ID>"\n\n# Assign the "adminagents" group in Partner tenant to the customer subscription\nNew-AzRoleAssignment -ObjectID "<Object ID of the AdminAgents group from step 7 of your actions section>" -RoleDefinitionName "Owner" -Scope "/subscriptions/<CSP subscription ID>" -ObjectType "ForeignGroup"\n')))}d.isMDXComponent=!0}}]);