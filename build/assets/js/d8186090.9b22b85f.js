"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6947],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),h=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=h(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=h(r),d=n,m=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return r?o.createElement(m,a(a({ref:t},p),{},{components:r})):o.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,a[1]=l;for(var h=2;h<i;h++)a[h]=r[h];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5160:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var o=r(7462),n=(r(7294),r(3905));const i={draft:!1,title:"Challenge 2 - Folder Size Report with PowerShell",description:"Create a script that can download any file by the URL given by a user.",slug:"pwsh-challenge-002",date:"2023-08-07T11:00",authors:[{name:"Will",title:"Creator of the IT KB.",url:"https://github.com/BassJamm?tab=repositories"}],tags:["PowerShell","Script","Challenge"],image:"https://cdn.hashnode.com/res/hashnode/image/upload/v1690624765820/c7da8f32-0c1e-4ca0-a807-bb4efe449c18.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",hide_table_of_contents:!1},a=void 0,l={permalink:"/blog/pwsh-challenge-002",source:"@site/blog/2023-08-02-pwsh-challenge002/PWSH-Challenge-002.md",title:"Challenge 2 - Folder Size Report with PowerShell",description:"Create a script that can download any file by the URL given by a user.",date:"2023-08-07T11:00:00.000Z",formattedDate:"August 7, 2023",tags:[{label:"PowerShell",permalink:"/blog/tags/power-shell"},{label:"Script",permalink:"/blog/tags/script"},{label:"Challenge",permalink:"/blog/tags/challenge"}],readingTime:3.3766666666666665,hasTruncateMarker:!0,authors:[{name:"Will",title:"Creator of the IT KB.",url:"https://github.com/BassJamm?tab=repositories"}],frontMatter:{draft:!1,title:"Challenge 2 - Folder Size Report with PowerShell",description:"Create a script that can download any file by the URL given by a user.",slug:"pwsh-challenge-002",date:"2023-08-07T11:00",authors:[{name:"Will",title:"Creator of the IT KB.",url:"https://github.com/BassJamm?tab=repositories"}],tags:["PowerShell","Script","Challenge"],image:"https://cdn.hashnode.com/res/hashnode/image/upload/v1690624765820/c7da8f32-0c1e-4ca0-a807-bb4efe449c18.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",hide_table_of_contents:!1},prevItem:{title:"Azure ligthhouse Setup",permalink:"/blog/Setup-Azure-Lighthouse"},nextItem:{title:"Challenge 1 - File Download Script with PowerShell",permalink:"/blog/pwsh-challenge-001"}},s={authorsImageUrls:[void 0]},h=[{value:"End Result",id:"end-result",level:2},{value:"Building the script",id:"building-the-script",level:2},{value:"Prompting for user input",id:"prompting-for-user-input",level:3},{value:"Getting the Folders",id:"getting-the-folders",level:3},{value:"Getting the Folder Sizes",id:"getting-the-folder-sizes",level:3},{value:"Creating a console Ouput",id:"creating-a-console-ouput",level:3}],p={toc:h},c="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Create a script that calculates the total size of a given folder and all its subfolders (recursively). The script should display the size in a human-readable format (e.g., KB, MB, GB)."),(0,n.kt)("admonition",{title:"Quick Social Plug",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Check out my other post locations: -"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://willh.hashnode.dev/"},"HashNode Link")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://patreon.com/BassJamm?utm_medium=clipboard_copy&utm_source=copyLink&utm_campaign=creatorshare_creator&utm_content=join_link"},"Patreon Link")))),(0,n.kt)("h2",{id:"end-result"},"End Result"),(0,n.kt)("p",null,"Thought I would put the result first, and save people from scrolling, those who wish to see the process can read the rest of this!"),(0,n.kt)("p",null,"I decided not to add any error handling into this, as it's quite hard to break this one!"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Sorry for the backticks, it makes it a bit easier to read on the page as it's quite slim!")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/BassJamm/PowerShellChallenge/blob/51799e1b087f846285f15bff9df9f019caa12fdc/Folder-Report/TOOL-Folder-Report.ps1"},"Link to script in GitHub!")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'###### Prompt user for flder input. ######\n$sourceDirectory = Read-Host -Prompt "Please enter the directory you wish to scan"\n\n###### Get all Directories in that location. ######\nWrite-Host "Collecting the diretory information." -ForegroundColor Yellow\n$ChildDirectories = (Get-ChildItem $sourceDirectory -Directory).FullName\nStart-Sleep 1\nWrite-Host "Directories found successfully." -ForegroundColor Green\n\n###### Foreach directory get all items recursively. ######\nWrite-Host "Processing items." -ForegroundColor Yellow\n$childDirectorySizes = foreach ($folder in $ChildDirectories) {\n    [PSCustomObject]@{\n        "Location"  = $folder\n        "FileItems" = (Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object | Select-Object Count).Count\n        "Size(MB)"  = [Math]::Round((Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object -Property Length -Sum | Select-Object Sum).Sum / 1MB, 3)\n    }\n\n}\nWrite-Host "All subdirectories processed successfully." -ForegroundColor Green\n\n###### Provide a size report of the directory and child directories. ######\n$childDirectorySizes | Format-Table * -AutoSize\n\n')),(0,n.kt)("h2",{id:"building-the-script"},"Building the script"),(0,n.kt)("p",null,"I would like to start by saying I am not an expert at this but, these challenges prompt learning and thus I aim to be better for the next challenge and so on."),(0,n.kt)("h3",{id:"prompting-for-user-input"},"Prompting for user input"),(0,n.kt)("p",null,"Firstly, we need to get the folder location from the end user. I've done this using the Read-Host command with the ",(0,n.kt)("inlineCode",{parentName:"p"},"-prompt")," parameter. This is a staple command I have found in almost every script requiring user input."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'$sourceDirectory = Read-Host -Prompt "Please enter the directory you wish to scan"\n')),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Read-Host -prompt")," input is then stored in the `$sourceDirectory`` variable for later use."),(0,n.kt)("h3",{id:"getting-the-folders"},"Getting the Folders"),(0,n.kt)("p",null,"Secondly, we need to identify the folders that are within the directory the user gave us. We are doing this with the ",(0,n.kt)("inlineCode",{parentName:"p"},"Get-ChildItem")," command, which gets everything in that location, Folders, or Files."),(0,n.kt)("p",null,"I'm then piping this ",(0,n.kt)("inlineCode",{parentName:"p"},"|")," into a ",(0,n.kt)("inlineCode",{parentName:"p"},"Where-Object")," command which then identifies the Folders or containers."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},'I\'ve added a sort by "name" at the end, as I want to display the first 10 items in the console, to indicate that the script has found items to the end user. It is completely unnecessary!')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showlineNumbers",showlineNumbers:!0},'###### Prompt user for flder input. ######\n$sourceDirectory = Read-Host -Prompt "Please enter the directory you wish to scan"\n')),(0,n.kt)("p",null,"We then get all of hte directories in the folder location promtped for using the lin above."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"###### Get all Directories in that location. ######\n$ChildDirectories = (Get-ChildItem $sourceDirectory -Directory).FullName\nStart-Sleep 1 # Add this for slightly better pacing when using the script.\n\n")),(0,n.kt)("h3",{id:"getting-the-folder-sizes"},"Getting the Folder Sizes"),(0,n.kt)("p",null,"Thirdly, we need to get the folder sizes and convert them into a nicer format to read, quite a bit to unpack on this one, so please bear with my explanation; you may also want to blow this image up, it's a little small, sorry!"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'###### Foreach directory get all items recursively. ######\nWrite-Host "Processing items." -ForegroundColor Yellow\n$childDirectorySizes = foreach ($folder in $ChildDirectories) {\n    [PSCustomObject]@{\n        "Location"  = $folder\n        "FileItems" = (Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object | Select-Object Count).Count\n        "Size(MB)"  = [Math]::Round((Get-ChildItem $folder -Recurse -Force | Where-Object { $_.PSIsContainer -eq $false } | Measure-Object -Property Length -Sum | Select-Object Sum).Sum / 1MB, 3)\n    }\n}\n')),(0,n.kt)("p",null,"I've created a new variable called, ",(0,n.kt)("inlineCode",{parentName:"p"},"$childDirectorySizes")," in this variable, we are going to store the output of the foreach loop."),(0,n.kt)("p",null,"The foreach the argument takes each folder entry found within the ",(0,n.kt)("inlineCode",{parentName:"p"},"$ChildDirectories")," & then loops through the script inside the squiggly brackets."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"foreach ($folder in $ChildDirectories)\n")),(0,n.kt)("p",null,"The foreach loop does the following: -"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Grabs the full file paths for each file recursively using ",(0,n.kt)("inlineCode",{parentName:"li"},"Get-ChildItem $folder.FullName -recurse -force"),"."),(0,n.kt)("li",{parentName:"ol"},"Then it searches for any objects that are not a Folder using ",(0,n.kt)("inlineCode",{parentName:"li"},"Where-Object {$_.PSIsContainer -eq $false}"),"."),(0,n.kt)("li",{parentName:"ol"},"It then measures the object using ",(0,n.kt)("inlineCode",{parentName:"li"},"Measure-Object -property Length -sum"),"."),(0,n.kt)("li",{parentName:"ol"},"We then select only the one property that we want, ",(0,n.kt)("inlineCode",{parentName:"li"},"Select-Object Sum"),"."),(0,n.kt)("li",{parentName:"ol"},"It then stores results inside the variable ",(0,n.kt)("inlineCode",{parentName:"li"},"$subFolderItems"),"."),(0,n.kt)("li",{parentName:"ol"},"We then create a new PowerShell object using the command, ",(0,n.kt)("inlineCode",{parentName:"li"},"[PSCustomObject]"),", as this is going to be a new Hash table, we add the ",(0,n.kt)("inlineCode",{parentName:"li"},"@{}")," after it, all properties go inside the squiggly brackets."),(0,n.kt)("li",{parentName:"ol"},"We then create 2 new properties, ",(0,n.kt)("inlineCode",{parentName:"li"},"Location")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"Size(MB)"),". For each of these properties, we need to tell it where the information comes from and how to format it.")),(0,n.kt)("p",null,"For ",(0,n.kt)("inlineCode",{parentName:"p"},"Location"),", we are going to use the Items Full name, which is equal to its full UNC path. ",(0,n.kt)("inlineCode",{parentName:"p"},"$folder.FullName"),"."),(0,n.kt)("p",null,"For ",(0,n.kt)("inlineCode",{parentName:"p"},"Size(MB)"),", we are going to use the Output of steps 1 to 5. The output from this should be the SUM of all the files under the folder item that's stored in the variable ",(0,n.kt)("inlineCode",{parentName:"p"},"$folder")," which is in the foreach loop argument."),(0,n.kt)("p",null,"We also want to round this to MBs with 2 Decimal places; we can do this with the command, ",(0,n.kt)("inlineCode",{parentName:"p"},"[Math]::Round($subFolderItems.sum /1MB, 2)"),"."),(0,n.kt)("h3",{id:"creating-a-console-ouput"},"Creating a console Ouput"),(0,n.kt)("p",null,"For this point, I have taken the variable that is holding the output from the Foreach loop noted above and piped this into a Format-Table command with the order of the properties to show."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"###### Provide a size report of the directory and child directories. ######\n$childDirectorySizes | Format-Table * -AutoSize\n")),(0,n.kt)("p",null,"Which gives you this."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"Location                           FileItems Size(MB)\n--------                           --------- --------\nC:\\GitRepos\\100-days-of-javascript       287   59.772\nC:\\GitRepos\\PowerShellChallenge          106    0.072\nC:\\GitRepos\\Private-Code-Dump            253   14.089\nC:\\GitRepos\\python-app                    97    0.067\nC:\\GitRepos\\The-IT-Knowledge-base      36396  414.871\n")))}u.isMDXComponent=!0}}]);