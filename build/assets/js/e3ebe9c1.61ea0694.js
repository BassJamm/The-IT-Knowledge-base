"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1154],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,u=p["".concat(l,".").concat(h)]||p[h]||m[h]||a;return n?o.createElement(u,i(i({ref:t},d),{},{components:n})):o.createElement(u,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3732:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={title:"Challenge 1 - File Download Script with PowerShell",description:"Create a script that can download any file by the URL given by a user.",slug:"pwsh-challenge-001",date:"2023-08-05T11:00",authors:[{name:"Will",title:"Creator of the IT KB.",url:"https://github.com/BassJamm?tab=repositories"}],tags:["PowerShell","Script","Challenge"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!1},i=void 0,s={permalink:"/blog/pwsh-challenge-001",source:"@site/blog/2023-08-05-pwsh-challenge001/PWSH-challenge-001.md",title:"Challenge 1 - File Download Script with PowerShell",description:"Create a script that can download any file by the URL given by a user.",date:"2023-08-05T11:00:00.000Z",formattedDate:"August 5, 2023",tags:[{label:"PowerShell",permalink:"/blog/tags/power-shell"},{label:"Script",permalink:"/blog/tags/script"},{label:"Challenge",permalink:"/blog/tags/challenge"}],readingTime:3.4366666666666665,hasTruncateMarker:!0,authors:[{name:"Will",title:"Creator of the IT KB.",url:"https://github.com/BassJamm?tab=repositories"}],frontMatter:{title:"Challenge 1 - File Download Script with PowerShell",description:"Create a script that can download any file by the URL given by a user.",slug:"pwsh-challenge-001",date:"2023-08-05T11:00",authors:[{name:"Will",title:"Creator of the IT KB.",url:"https://github.com/BassJamm?tab=repositories"}],tags:["PowerShell","Script","Challenge"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!1},prevItem:{title:"Challenge 2 - Folder Size Report with PowerShell",permalink:"/blog/pwsh-challenge-002"},nextItem:{title:"Microsoft Defender for Endpoint Woes",permalink:"/blog/Defender-for-Endpoint-Woes"}},l={authorsImageUrls:[void 0]},c=[{value:"Creating the script",id:"creating-the-script",level:2},{value:"Basic functionality",id:"basic-functionality",level:3},{value:"Adding running and historic job reports",id:"adding-running-and-historic-job-reports",level:2},{value:"Canceling jobs",id:"canceling-jobs",level:2},{value:"Adding in some error handling and console output",id:"adding-in-some-error-handling-and-console-output",level:2},{value:"Downloading the file section",id:"downloading-the-file-section",level:3},{value:"Canceling the download section",id:"canceling-the-download-section",level:3},{value:"Full Script",id:"full-script",level:2},{value:"Bonus: Multiple downloads",id:"bonus-multiple-downloads",level:2}],d={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a script that can download any file by the URL given by a user. Add in the ability to download multiple items at once."),(0,r.kt)("admonition",{title:"Quick Social Plug",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Check out my other post locations: -"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://willh.hashnode.dev/"},"HashNode Link")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://patreon.com/BassJamm?utm_medium=clipboard_copy&utm_source=copyLink&utm_campaign=creatorshare_creator&utm_content=join_link"},"Patreon Link")))),(0,r.kt)("h2",{id:"creating-the-script"},"Creating the script"),(0,r.kt)("h3",{id:"basic-functionality"},"Basic functionality"),(0,r.kt)("p",null,"Firstly, we'll create the logic outline, by that I mean, create the bare bones of the script without any error handling or console output."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"I've seen parameter blocks written in multiple ways, I write them this way as I think they're more easily understood by those who are not familiar with them.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"<# Parameter List #>\n[CmdletBinding()]\nparam (\n    [Parameter(Mandatory=$true)]\n    [string] $Source,\n    [Parameter(Mandatory=$true)]\n    [string] $Destination\n)\n<# Bare bones of the command to download an item. #>\nStart-BitsTransfer -Source $Source -Destination $Destination -TransferType Download\n")),(0,r.kt)("p",null,"Running the above script file by type ",(0,r.kt)("inlineCode",{parentName:"p"},'.\\TOOL-File-download.ps1 -Source "'),(0,r.kt)("a",{parentName:"p",href:"https://go.microsoft.com/fwlink/p/?LinkID=2195167&clcid=0x409&culture=en-us&country=US"},(0,r.kt)("inlineCode",{parentName:"a"},"https://go.microsoft.com/fwlink/p/?LinkID=2195167&clcid=0x409&culture=en-us&country=US")),(0,r.kt)("inlineCode",{parentName:"p"},'" -Destination C:\\Temp\\Server2019.iso')," does the job; the output is below."),(0,r.kt)("p",null,"Now to add the ability to see running jobs and historic jobs."),(0,r.kt)("h2",{id:"adding-running-and-historic-job-reports"},"Adding running and historic job reports"),(0,r.kt)("p",null,"As you can see below, this is becoming a bit longer but, I would not say it is getting any more complex."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'\n<# Parameter List #>\n[CmdletBinding()]\nparam (\n    [Parameter()]\n    [switch] $JobReport,\n    [Parameter()]\n    [switch] $JobHistory\n)\n###### Add the ability to review in-progress download job(s). ######\nif ($JobReport) {\n    <# Action to perform if the condition is true #>\n    Write-Host "Getting running downloads."\n    Get-BitsTransfer | Where-Object JobState -EQ \'transferring\' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\n}\n###### Add the ability to review historic job(s). ######\nif ($JobHistory) {\n    <# Action to perform if the condition is true #>\n    Write-Host "Getting historic downloads."\n    Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\n}\n')),(0,r.kt)("p",null,"Now to add a way to cancel running jobs."),(0,r.kt)("h2",{id:"canceling-jobs"},"Canceling jobs"),(0,r.kt)("p",null,"Below I have added the code to cancel a running job, although a bit basic and rough it does work."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},"\n<# Parameter List #>\n[CmdletBinding()]\nparam (\n    [Parameter()]\n    [String] $CancelJob\n)\n\n###### Add the ability to cancel job(s). ######\nif ($CancelJob) {\n    <# Action to perform if the condition is true #>\n    Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer\n    Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\n    \n}\n")),(0,r.kt)("h2",{id:"adding-in-some-error-handling-and-console-output"},"Adding in some error handling and console output"),(0,r.kt)("p",null,"Below I have added in some 'fluff', some try","\\","catch blocks and some write-host functionality to make using this a bit easier."),(0,r.kt)("p",null,"Try","\\","Catch blocks are a godsend when it comes to error handling, essentially it means try what is in the try area and catch anything that comes out of it."),(0,r.kt)("h3",{id:"downloading-the-file-section"},"Downloading the file section"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'###### Download a file. ######\nif ($Source) {\n    <# Action to perform if the condition is true #>\n    try {\n        Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName\n        Write-Host "Beginning download from $($Source)."\n        Write-Host "" # This just adds some more space in the console.\n        \n    }\n    catch {\n        <#Do this if a terminating exception happens#>\n        Write-Host "Error when starting the job."\n        $_\n    }\n}\n')),(0,r.kt)("h3",{id:"canceling-the-download-section"},"Canceling the download section"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"showLineNumbers",showLineNumbers:!0},'\n###### Add the ability to cancel job(s). ######\nif ($CancelJob) {\n    <# Action to perform if the condition is true #>\n    try {\n        Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer\n        Write-Host "Job cancelled successfully." -ForegroundColor Green\n        Write-Host "" # This just adds some more space in the console.\n        Start-sleep 2\n        Write-Host "Remaining jobs listed below." -ForegroundColor Yellow\n        Write-Host "" # This just adds some more space in the console.\n        Start-sleep 1\n        Get-BitsTransfer | Where-Object JobState -EQ \'transferring\' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize    \n    }\n    catch {\n        <#Do this if a terminating exception happens#>\n        Write-Host "Error when cancelling job."\n        $_\n    }\n}\n')),(0,r.kt)("h2",{id:"full-script"},"Full Script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},'\n<# Parameter List #>\n[CmdletBinding()]\nparam (\n    [Parameter()]\n    [string] $Source,\n    [Parameter()]\n    [string] $Destination,\n    [Parameter()]\n    [string] $JobName,\n    [Parameter()]\n    [switch] $RunningJobs,\n    [Parameter()]\n    [switch] $JobHistory,\n    [Parameter()]\n    [String] $CancelJob\n)\n###### Download a file. ######\nif ($Source) {\n    <# Action to perform if the condition is true #>\n    try {\n        Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName\n        Write-Host "Beginning download from $($Source)."\n        Write-Host "" # This just adds some more space in the console.\n        \n    }\n    catch {\n        <#Do this if a terminating exception happens#>\n        Write-Host "Error when starting the job."\n        $_\n    }\n}\n\n###### Add the ability to review in-progress download job(s). ######\nif ($RunningJobs) {\n    <# Action to perform if the condition is true #>\n    Write-Host "Getting running downloads."\n    Write-Host "" # This just adds some more space in the console.\n    Get-BitsTransfer | Where-Object JobState -EQ \'transferring\' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\n}\n\n###### Add the ability to review historic job(s). ######\nif ($JobHistory) {\n    <# Action to perform if the condition is true #>\n    Write-Host "Getting historic downloads."\n    Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\n}\n\n###### Add the ability to cancel job(s). ######\nif ($CancelJob) {\n    <# Action to perform if the condition is true #>\n\n    try {\n        Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer\n        Write-Host "Job cancelled successfully." -ForegroundColor Green\n        Write-Host "" # This just adds some more space in the console.\n        Start-sleep 2\n        Write-Host "Remaining jobs listed below." -ForegroundColor Yellow\n        Write-Host "" # This just adds some more space in the console.\n        Start-sleep 1\n        Get-BitsTransfer | Where-Object JobState -EQ \'transferring\' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\n        \n    }\n    catch {\n        <#Do this if a terminating exception happens#>\n        Write-Host "Error when cancelling job."\n        $_\n    }\n\n}\n')),(0,r.kt)("h2",{id:"bonus-multiple-downloads"},"Bonus: Multiple downloads"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Start-BitsTransfer")," command supports pipeline input, so you can add multiple download links using a text file."),(0,r.kt)("p",null,"Create a text file in the format below, this is a typical csv format."),(0,r.kt)("p",null,"![](",(0,r.kt)("a",{parentName:"p",href:"https://cdn.hashnode.com/res/hashnode/image/upload/v1690560380176/0d5d0ab7-5b77-4010-9ed7-e30d780a510a.png"},"https://cdn.hashnode.com/res/hashnode/image/upload/v1690560380176/0d5d0ab7-5b77-4010-9ed7-e30d780a510a.png"),' align="center")'),(0,r.kt)("p",null,"Additional Code was added to the script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},'\n<# Parameter List #>\n[CmdletBinding()]\nparam (\n    [Parameter()]\n    [string] $MultiJobDownload\n)\n###### Download multiple files. ######\nif ($MultiJobDownload) {\n    <# Action to perform if the condition is true #>\n    try {\n        Import-csv -Path $MultiJobDownload | Start-BitsTransfer -Asynchronous\n        Write-Host "Beginning download from listed sources."\n        Write-Host "" # This just adds some more space in the console.\n        Start-Sleep 1\n        Write-Host " Sources and destinations below: -"\n        Get-Content -Path $MultiJobDownload\n        \n    }\n    catch {\n        <#Do this if a terminating exception happens#>\n        Write-Host "Error when starting the job."\n        $_\n    }\n}\n')))}m.isMDXComponent=!0}}]);