{
  "blogPosts": [
    {
      "id": "pwsh-challenge-001",
      "metadata": {
        "permalink": "/blog/pwsh-challenge-001",
        "source": "@site/blog/2023/05-08-PWSH-Challenge-001.md",
        "title": "Challenge 1 - File Download Script with PowerShell",
        "description": "Create a script that can download any file by the URL given by a user.",
        "date": "2023-08-05T11:00:00.000Z",
        "formattedDate": "August 5, 2023",
        "tags": [
          {
            "label": "PowerShell",
            "permalink": "/blog/tags/power-shell"
          },
          {
            "label": "Script",
            "permalink": "/blog/tags/script"
          },
          {
            "label": "Challenge",
            "permalink": "/blog/tags/challenge"
          }
        ],
        "readingTime": 3.4366666666666665,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Will",
            "title": "Creator of the IT KB.",
            "url": "https://github.com/BassJamm?tab=repositories"
          }
        ],
        "frontMatter": {
          "title": "Challenge 1 - File Download Script with PowerShell",
          "description": "Create a script that can download any file by the URL given by a user.",
          "slug": "pwsh-challenge-001",
          "date": "2023-08-05T11:00",
          "authors": [
            {
              "name": "Will",
              "title": "Creator of the IT KB.",
              "url": "https://github.com/BassJamm?tab=repositories"
            }
          ],
          "tags": [
            "PowerShell",
            "Script",
            "Challenge"
          ],
          "image": "https://i.imgur.com/mErPwqL.png",
          "hide_table_of_contents": false
        },
        "nextItem": {
          "title": "Hi!",
          "permalink": "/blog/welcome"
        }
      },
      "content": "Create a script that can download any file by the URL given by a user. Add in the ability to download multiple items at once.\r\n\r\n<!--truncate-->\r\n:::info Quick Social Plug\r\n\r\nCheck out my other post locations: -\r\n\r\n- [HashNode Link](https://willh.hashnode.dev/)\r\n- [Patreon Link](https://patreon.com/BassJamm?utm_medium=clipboard_copy&utm_source=copyLink&utm_campaign=creatorshare_creator&utm_content=join_link)\r\n\r\n:::\r\n\r\n## Creating the script\r\n\r\n### Basic functionality\r\n\r\nFirstly, we'll create the logic outline, by that I mean, create the bare bones of the script without any error handling or console output.\r\n\r\n:::note\r\n\r\nI've seen parameter blocks written in multiple ways, I write them this way as I think they're more easily understood by those who are not familiar with them.\r\n\r\n:::\r\n\r\n```powershell showLineNumbers\r\n<# Parameter List #>\r\n[CmdletBinding()]\r\nparam (\r\n    [Parameter(Mandatory=$true)]\r\n    [string] $Source,\r\n    [Parameter(Mandatory=$true)]\r\n    [string] $Destination\r\n)\r\n<# Bare bones of the command to download an item. #>\r\nStart-BitsTransfer -Source $Source -Destination $Destination -TransferType Download\r\n```\r\n\r\nRunning the above script file by type `.\\TOOL-File-download.ps1 -Source \"`[`https://go.microsoft.com/fwlink/p/?LinkID=2195167&clcid=0x409&culture=en-us&country=US`](https://go.microsoft.com/fwlink/p/?LinkID=2195167&clcid=0x409&culture=en-us&country=US)`\" -Destination C:\\Temp\\Server2019.iso` does the job; the output is below.\r\n\r\n\r\nNow to add the ability to see running jobs and historic jobs.\r\n\r\n## Adding running and historic job reports\r\n\r\nAs you can see below, this is becoming a bit longer but, I would not say it is getting any more complex.\r\n\r\n```powershell showLineNumbers\r\n\r\n<# Parameter List #>\r\n[CmdletBinding()]\r\nparam (\r\n    [Parameter()]\r\n    [switch] $JobReport,\r\n    [Parameter()]\r\n    [switch] $JobHistory\r\n)\r\n###### Add the ability to review in-progress download job(s). ######\r\nif ($JobReport) {\r\n    <# Action to perform if the condition is true #>\r\n    Write-Host \"Getting running downloads.\"\r\n    Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\r\n}\r\n###### Add the ability to review historic job(s). ######\r\nif ($JobHistory) {\r\n    <# Action to perform if the condition is true #>\r\n    Write-Host \"Getting historic downloads.\"\r\n    Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\r\n}\r\n```\r\nNow to add a way to cancel running jobs.\r\n\r\n## Canceling jobs\r\n\r\nBelow I have added the code to cancel a running job, although a bit basic and rough it does work.\r\n\r\n```powershell showLineNumbers\r\n\r\n<# Parameter List #>\r\n[CmdletBinding()]\r\nparam (\r\n    [Parameter()]\r\n    [String] $CancelJob\r\n)\r\n\r\n###### Add the ability to cancel job(s). ######\r\nif ($CancelJob) {\r\n    <# Action to perform if the condition is true #>\r\n    Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer\r\n    Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\r\n    \r\n}\r\n```\r\n\r\n## Adding in some error handling and console output\r\n\r\nBelow I have added in some 'fluff', some try\\\\catch blocks and some write-host functionality to make using this a bit easier.\r\n\r\nTry\\\\Catch blocks are a godsend when it comes to error handling, essentially it means try what is in the try area and catch anything that comes out of it.\r\n\r\n### Downloading the file section\r\n\r\n```powershell showLineNumbers\r\n###### Download a file. ######\r\nif ($Source) {\r\n    <# Action to perform if the condition is true #>\r\n    try {\r\n        Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName\r\n        Write-Host \"Beginning download from $($Source).\"\r\n        Write-Host \"\" # This just adds some more space in the console.\r\n        \r\n    }\r\n    catch {\r\n        <#Do this if a terminating exception happens#>\r\n        Write-Host \"Error when starting the job.\"\r\n        $_\r\n    }\r\n}\r\n```\r\n\r\n### Canceling the download section\r\n\r\n```powershell showLineNumbers\r\n\r\n###### Add the ability to cancel job(s). ######\r\nif ($CancelJob) {\r\n    <# Action to perform if the condition is true #>\r\n    try {\r\n        Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer\r\n        Write-Host \"Job cancelled successfully.\" -ForegroundColor Green\r\n        Write-Host \"\" # This just adds some more space in the console.\r\n        Start-sleep 2\r\n        Write-Host \"Remaining jobs listed below.\" -ForegroundColor Yellow\r\n        Write-Host \"\" # This just adds some more space in the console.\r\n        Start-sleep 1\r\n        Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize    \r\n    }\r\n    catch {\r\n        <#Do this if a terminating exception happens#>\r\n        Write-Host \"Error when cancelling job.\"\r\n        $_\r\n    }\r\n}\r\n```\r\n\r\n## Full Script\r\n\r\n```powershell\r\n\r\n<# Parameter List #>\r\n[CmdletBinding()]\r\nparam (\r\n    [Parameter()]\r\n    [string] $Source,\r\n    [Parameter()]\r\n    [string] $Destination,\r\n    [Parameter()]\r\n    [string] $JobName,\r\n    [Parameter()]\r\n    [switch] $RunningJobs,\r\n    [Parameter()]\r\n    [switch] $JobHistory,\r\n    [Parameter()]\r\n    [String] $CancelJob\r\n)\r\n###### Download a file. ######\r\nif ($Source) {\r\n    <# Action to perform if the condition is true #>\r\n    try {\r\n        Start-BitsTransfer -Source $Source -Destination $Destination -TransferType Download -Asynchronous -DisplayName $JobName\r\n        Write-Host \"Beginning download from $($Source).\"\r\n        Write-Host \"\" # This just adds some more space in the console.\r\n        \r\n    }\r\n    catch {\r\n        <#Do this if a terminating exception happens#>\r\n        Write-Host \"Error when starting the job.\"\r\n        $_\r\n    }\r\n}\r\n\r\n###### Add the ability to review in-progress download job(s). ######\r\nif ($RunningJobs) {\r\n    <# Action to perform if the condition is true #>\r\n    Write-Host \"Getting running downloads.\"\r\n    Write-Host \"\" # This just adds some more space in the console.\r\n    Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\r\n}\r\n\r\n###### Add the ability to review historic job(s). ######\r\nif ($JobHistory) {\r\n    <# Action to perform if the condition is true #>\r\n    Write-Host \"Getting historic downloads.\"\r\n    Get-BitsTransfer | Sort-Object CreationTime -Descending | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\r\n}\r\n\r\n###### Add the ability to cancel job(s). ######\r\nif ($CancelJob) {\r\n    <# Action to perform if the condition is true #>\r\n\r\n    try {\r\n        Get-BitsTransfer -Name $CancelJob | Remove-BitsTransfer\r\n        Write-Host \"Job cancelled successfully.\" -ForegroundColor Green\r\n        Write-Host \"\" # This just adds some more space in the console.\r\n        Start-sleep 2\r\n        Write-Host \"Remaining jobs listed below.\" -ForegroundColor Yellow\r\n        Write-Host \"\" # This just adds some more space in the console.\r\n        Start-sleep 1\r\n        Get-BitsTransfer | Where-Object JobState -EQ 'transferring' | Format-Table JobId, CreationTime,DisplayName,TransferType,JobState,BytesTransferred,BytesTotal -AutoSize\r\n        \r\n    }\r\n    catch {\r\n        <#Do this if a terminating exception happens#>\r\n        Write-Host \"Error when cancelling job.\"\r\n        $_\r\n    }\r\n\r\n}\r\n```\r\n\r\n## Bonus: Multiple downloads\r\n\r\nThe `Start-BitsTransfer` command supports pipeline input, so you can add multiple download links using a text file.\r\n\r\nCreate a text file in the format below, this is a typical csv format.\r\n\r\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1690560380176/0d5d0ab7-5b77-4010-9ed7-e30d780a510a.png align=\"center\")\r\n\r\nAdditional Code was added to the script.\r\n\r\n```powershell\r\n\r\n<# Parameter List #>\r\n[CmdletBinding()]\r\nparam (\r\n    [Parameter()]\r\n    [string] $MultiJobDownload\r\n)\r\n###### Download multiple files. ######\r\nif ($MultiJobDownload) {\r\n    <# Action to perform if the condition is true #>\r\n    try {\r\n        Import-csv -Path $MultiJobDownload | Start-BitsTransfer -Asynchronous\r\n        Write-Host \"Beginning download from listed sources.\"\r\n        Write-Host \"\" # This just adds some more space in the console.\r\n        Start-Sleep 1\r\n        Write-Host \" Sources and destinations below: -\"\r\n        Get-Content -Path $MultiJobDownload\r\n        \r\n    }\r\n    catch {\r\n        <#Do this if a terminating exception happens#>\r\n        Write-Host \"Error when starting the job.\"\r\n        $_\r\n    }\r\n}\r\n```"
    },
    {
      "id": "welcome",
      "metadata": {
        "permalink": "/blog/welcome",
        "source": "@site/blog/09-05-welcome-v2.md",
        "title": "Hi!",
        "description": "First blog post.",
        "date": "2023-05-20T10:00:00.000Z",
        "formattedDate": "May 20, 2023",
        "tags": [
          {
            "label": "hello",
            "permalink": "/blog/tags/hello"
          },
          {
            "label": "docusaurus-v2",
            "permalink": "/blog/tags/docusaurus-v-2"
          }
        ],
        "readingTime": 0.1,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Will",
            "title": "Creator of the IT KB.",
            "url": "https://github.com/BassJamm?tab=repositories"
          }
        ],
        "frontMatter": {
          "title": "Hi!",
          "description": "First blog post.",
          "slug": "welcome",
          "date": "2023-05-20T10:00",
          "authors": [
            {
              "name": "Will",
              "title": "Creator of the IT KB.",
              "url": "https://github.com/BassJamm?tab=repositories"
            }
          ],
          "tags": [
            "hello",
            "docusaurus-v2"
          ],
          "image": "https://i.imgur.com/mErPwqL.png",
          "hide_table_of_contents": false
        },
        "prevItem": {
          "title": "Challenge 1 - File Download Script with PowerShell",
          "permalink": "/blog/pwsh-challenge-001"
        }
      },
      "content": "Welcome to the blog.\r\n\r\nThis blog is created with [**Docusaurus 2**](https://docusaurus.io/).\r\n\r\n<!--truncate-->\r\n:::info Quick Social Plug\r\n\r\nCheck out my other post locations: -\r\n\r\n- [HashNode Link](https://willh.hashnode.dev/)\r\n- [Patreon Link](https://patreon.com/BassJamm?utm_medium=clipboard_copy&utm_source=copyLink&utm_campaign=creatorshare_creator&utm_content=join_link)\r\n\r\n:::"
    }
  ]
}